# This workflow will make use of Faktory put behind NGINX to test the crate's `tls` feature
# (see the `docker` directory in the project's root).
#
# We are also utilizing this dedicated workflow and Faktory deployment to test that password authentication works
# as expected (see the password part in the `FAKTORY_URL_SECURE` connection string and the `FAKTORY_PASSWORD` environment
# variable in the `faktory` service description in the compose file in the `docker` directory mentioned above.
permissions:
  contents: read
on:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: tls
jobs:
  test:
    runs-on: ubuntu-latest
    name: ubuntu-latest / stable / tls
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Launch Faktory behind NGINX
        run: docker compose -f docker/compose.yml up -d --build
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Run tests
        env:
          FAKTORY_URL_SECURE: tcp://:uredinales@localhost:17419
        run: cargo test --locked --features native_tls,rustls --test tls
