
*** src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new(Default::default())))

*** mutation diff:
--- src/proto/client/mod.rs
+++ replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new(Default::default())))
@@ -188,22 +188,17 @@
 }
 
 impl<S: AsyncRead + AsyncWrite + Send + Unpin> Client<BufStream<S>> {
     /// Create new [`Client`] and connect to a Faktory server with a non-standard stream.
     pub async fn connect_with(
         stream: S,
         pwd: Option<String>,
     ) -> Result<Client<BufStream<S>>, Error> {
-        let buffered = BufStream::new(stream);
-        let opts = ClientOptions {
-            password: pwd,
-            ..Default::default()
-        };
-        Client::new(buffered, opts).await
+        Ok(Client::from(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Client<BufStream<TokioStream>> {
     /// Create new [`Client`] and connect to a Faktory server.
     ///
     /// If `url` is not given, will use the standard Faktory environment variables. Specifically,
     /// `FAKTORY_PROVIDER` is read to get the name of the environment variable to get the address


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-jIMFg4.tmp)
error[E0308]: mismatched types
   --> src/proto/client/mod.rs:196:25
    |
196 |         Ok(Client::from(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
    |            ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Client<BufStream<S>>`, found `BufStream<_>`
    |            |
    |            arguments to this function are incorrect
    |
    = note: expected struct `Client<BufStream<S>>`
               found struct `BufStream<_>`
note: associated function defined here
   --> /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:584:8
    |
584 |     fn from(value: T) -> Self;
    |        ^^^^

For more information about this error, try `rustc --explain E0308`.
error: could not compile `faktory` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 1 previous error

*** result: Failure(101)
