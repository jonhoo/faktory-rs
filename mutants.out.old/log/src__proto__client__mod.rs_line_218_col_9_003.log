
*** src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new(Default::default())))

*** mutation diff:
--- src/proto/client/mod.rs
+++ replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new(Default::default())))
@@ -210,19 +210,17 @@
     /// from (defaults to `FAKTORY_URL`), and then that environment variable is read to get the
     /// server address. If the latter environment variable is not defined, the connection will be
     /// made to
     ///
     /// ```text
     /// tcp://localhost:7419
     /// ```
     pub async fn connect(url: Option<&str>) -> Result<Client<BufStream<TokioStream>>, Error> {
-        let url = utils::parse_provided_or_from_env(url)?;
-        let stream = TokioStream::connect(utils::host_from_url(&url)).await?;
-        Self::connect_with(stream, url.password().map(|p| p.to_string())).await
+        Ok(Client::new(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl<S> Client<S>
 where
     S: AsyncBufReadExt + AsyncWriteExt + Unpin + Send,
 {
     async fn init(&mut self) -> Result<(), Error> {


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-jIMFg4.tmp)
error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> src/proto/client/mod.rs:218:12
    |
218 |         Ok(Client::new(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
    |            ^^^^^^^^^^^------------------------------------ an argument of type `ClientOptions` is missing
    |
note: associated function defined here
   --> src/proto/client/mod.rs:266:25
    |
266 |     pub(crate) async fn new(stream: S, opts: ClientOptions) -> Result<Client<S>, Error> {
    |                         ^^^ ---------  -------------------
help: provide the argument
    |
218 |         Ok(Client::new(BufStream::new(Default::default()), /* ClientOptions */)) /* ~ changed by cargo-mutants ~ */
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> src/proto/client/mod.rs:218:12
    |
218 |         Ok(Client::new(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Client<BufStream<TcpStream>>`, found future
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl Future<Output = Result<Client<BufStream<_>>, error::Error>>` due to the type of the argument passed
   --> src/proto/client/mod.rs:218:9
    |
218 |         Ok(Client::new(BufStream::new(Default::default()))) /* ~ changed by cargo-mutants ~ */
    |         ^^^-----------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

Some errors have detailed explanations: E0061, E0308.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `faktory` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 2 previous errors

*** result: Failure(101)
