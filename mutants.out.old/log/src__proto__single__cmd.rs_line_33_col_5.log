
*** src/proto/single/cmd.rs:33:5: replace write_queues -> Result<(), Error> with Ok(())

*** mutation diff:
--- src/proto/single/cmd.rs
+++ replace write_queues -> Result<(), Error> with Ok(())
@@ -25,22 +25,17 @@
 
 /// Write queues as part of a command. They are written with a leading space
 /// followed by space separated queue names.
 async fn write_queues<W, S>(w: &mut W, queues: &[S]) -> Result<(), Error>
 where
     W: AsyncWriteExt + Unpin + Send,
     S: AsRef<str>,
 {
-    for q in queues {
-        w.write_all(b" ").await?;
-        w.write_all(q.as_ref().as_bytes()).await?;
-    }
-
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 // -------------------- INFO ----------------------
 
 pub(crate) struct Info;
 
 #[async_trait::async_trait]
 impl FaktoryCommand for Info {


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-jIMFg4.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 1.25s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
    Finished test [unoptimized + debuginfo] target(s) in 0.05s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::single::resp::test::it_decodes_blob_json ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... ok
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... ok
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.99s

     Running unittests src/bin/loadtest.rs (target/debug/deps/loadtest-c216a21f6a383186)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/consumer.rs (target/debug/deps/consumer-e1d67c7fdddceb0c)

running 8 tests
test hello ... ok
test dequeue ... FAILED
test dequeue_first_empty ... FAILED
test hello_pwd ... ok
test terminate ... FAILED
test well_behaved_many ... FAILED
test no_first_job ... FAILED
test well_behaved ... FAILED

failures:

---- dequeue stdout ----
thread 'dequeue' panicked at tests/consumer.rs:89:5:
assertion `left == right` failed
  left: [70, 69, 84, 67, 72, 13, 10, 65, 67, 75, 32, 123, 34, 106, 105, 100, 34, 58, 34, 102, 111, 111, 106, 105, 100, 34, 125, 13, 10]
 right: [70, 69, 84, 67, 72, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 65, 67, 75, 32, 123, 34, 106, 105, 100, 34, 58, 34, 102, 111, 111, 106, 105, 100, 34, 125, 13, 10]
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- dequeue_first_empty stdout ----
thread 'dequeue_first_empty' panicked at tests/consumer.rs:141:5:
assertion `left == right` failed
  left: [70, 69, 84, 67, 72, 13, 10, 70, 69, 84, 67, 72, 13, 10, 65, 67, 75, 32, 123, 34, 106, 105, 100, 34, 58, 34, 102, 111, 111, 106, 105, 100, 34, 125, 13, 10]
 right: [70, 69, 84, 67, 72, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 70, 69, 84, 67, 72, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 65, 67, 75, 32, 123, 34, 106, 105, 100, 34, 58, 34, 102, 111, 111, 106, 105, 100, 34, 125, 13, 10]

---- terminate stdout ----
{"jid":"forever","errtype":"unknown","message":"terminated"}
thread 'terminate' panicked at tests/consumer.rs:420:5:
assertion `left == right` failed
  left: "],\"v\":2}\r\nFETCH\r\n"
 right: "\r\nFETCH default\r\n"

---- well_behaved_many stdout ----
thread 'well_behaved_many' panicked at tests/consumer.rs:351:9:
assertion `left == right` failed
  left: "],\"v\":2}\r\nFETCH\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"
 right: "\r\nFETCH default\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"

---- no_first_job stdout ----
thread 'no_first_job' panicked at tests/consumer.rs:276:5:
assertion `left == right` failed
  left: ":[\"rust\"],\"v\":2}\r\nFETCH\r\nFETCH\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"
 right: "\r\nFETCH default\r\nFETCH default\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"

---- well_behaved stdout ----
thread 'well_behaved' panicked at tests/consumer.rs:210:5:
assertion `left == right` failed
  left: "],\"v\":2}\r\nFETCH\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"
 right: "\r\nFETCH default\r\nACK {\"jid\":\"jid\"}\r\nEND\r\n"


failures:
    dequeue
    dequeue_first_empty
    no_first_job
    terminate
    well_behaved
    well_behaved_many

test result: FAILED. 2 passed; 6 failed; 0 ignored; 0 measured; 0 filtered out; finished in 10.14s

error: test failed, to rerun pass `--test consumer`

*** result: Failure(101)
