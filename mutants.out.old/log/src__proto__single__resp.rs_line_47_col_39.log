
*** src/proto/single/resp.rs:47:39: replace == with != in read_json

*** mutation diff:
--- src/proto/single/resp.rs
+++ replace == with != in read_json
@@ -39,17 +39,17 @@
         RawResponse::String(ref s) if s == "OK" => {
             return Ok(None);
         }
         RawResponse::String(ref s) => {
             return serde_json::from_str(s)
                 .map(Some)
                 .map_err(Error::Serialization);
         }
-        RawResponse::Blob(ref b) if b == b"OK" => {
+        RawResponse::Blob(ref b) if b != /* ~ changed by cargo-mutants ~ */ b"OK" => {
             return Ok(None);
         }
         RawResponse::Blob(ref b) => {
             if b.is_empty() {
                 return Ok(None);
             }
             return serde_json::from_slice(b)
                 .map(Some)


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-jIMFg4.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 1.47s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
    Finished test [unoptimized + debuginfo] target(s) in 0.07s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::single::resp::test::it_decodes_blob_json ... FAILED
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... FAILED
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... FAILED
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

failures:

---- proto::single::resp::test::it_decodes_blob_json stdout ----
thread 'proto::single::resp::test::it_decodes_blob_json' panicked at src/proto/single/resp.rs:383:9:
assertion `left == right` failed
  left: None
 right: Some(Object {"hello": Number(1)})
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- proto::single::resp::test::it_decodes_json_ok_blob stdout ----
thread 'proto::single::resp::test::it_decodes_json_ok_blob' panicked at src/proto/single/resp.rs:355:39:
called `Result::unwrap()` on an `Err` value: Serialization(Error("expected value", line: 1, column: 1))

---- proto::single::resp::test::it_errors_on_bad_json_blob stdout ----
thread 'proto::single::resp::test::it_errors_on_bad_json_blob' panicked at src/proto/single/resp.rs:389:63:
called `Result::unwrap_err()` on an `Ok` value: None


failures:
    proto::single::resp::test::it_decodes_blob_json
    proto::single::resp::test::it_decodes_json_ok_blob
    proto::single::resp::test::it_errors_on_bad_json_blob

test result: FAILED. 32 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out; finished in 3.10s

error: test failed, to rerun pass `--lib`

*** result: Failure(101)
