
*** src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new())

*** mutation diff:
--- src/proto/client/mod.rs
+++ replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new())
@@ -188,22 +188,17 @@
 }
 
 impl<S: AsyncRead + AsyncWrite + Send + Unpin> Client<BufStream<S>> {
     /// Create new [`Client`] and connect to a Faktory server with a non-standard stream.
     pub async fn connect_with(
         stream: S,
         pwd: Option<String>,
     ) -> Result<Client<BufStream<S>>, Error> {
-        let buffered = BufStream::new(stream);
-        let opts = ClientOptions {
-            password: pwd,
-            ..Default::default()
-        };
-        Client::new(buffered, opts).await
+        Ok(Client::new()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Client<BufStream<TokioStream>> {
     /// Create new [`Client`] and connect to a Faktory server.
     ///
     /// If `url` is not given, will use the standard Faktory environment variables. Specifically,
     /// `FAKTORY_PROVIDER` is read to get the name of the environment variable to get the address


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-jIMFg4.tmp/Cargo.toml --all-features
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-jIMFg4.tmp)
error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> src/proto/client/mod.rs:196:12
    |
196 |         Ok(Client::new()) /* ~ changed by cargo-mutants ~ */
    |            ^^^^^^^^^^^-- two arguments are missing
    |
note: associated function defined here
   --> src/proto/client/mod.rs:263:25
    |
263 |     pub(crate) async fn new(stream: S, opts: ClientOptions) -> Result<Client<S>, Error> {
    |                         ^^^ ---------  -------------------
help: provide the arguments
    |
196 |         Ok(Client::new(/* stream */, /* ClientOptions */)) /* ~ changed by cargo-mutants ~ */
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> src/proto/client/mod.rs:196:12
    |
196 |         Ok(Client::new()) /* ~ changed by cargo-mutants ~ */
    |         -- ^^^^^^^^^^^^^ expected `Client<BufStream<S>>`, found future
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl Future<Output = Result<Client<_>, error::Error>>` due to the type of the argument passed
   --> src/proto/client/mod.rs:196:9
    |
196 |         Ok(Client::new()) /* ~ changed by cargo-mutants ~ */
    |         ^^^-------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

Some errors have detailed explanations: E0061, E0308.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `faktory` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 2 previous errors

*** result: Failure(101)
