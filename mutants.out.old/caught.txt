src/proto/client/mod.rs:23:12: replace != with == in check_protocols_match
src/proto/single/mod.rs:255:9: replace Job::args -> &[serde_json::Value] with Vec::leak(vec![Default::default()])
src/proto/utils.rs:5:5: replace get_env_url -> String with "xyzzy".into()
src/worker/builder.rs:53:9: replace WorkerBuilder<E>::labels -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/utils.rs:7:5: replace gen_random_id -> String with "xyzzy".into()
src/proto/single/cmd.rs:298:9: replace <impl FaktoryCommand for QueueControl<'_, Q>>::issue -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:378:9: replace Client<S>::queue_pause -> Result<(), Error> with Ok(())
src/proto/single/mod.rs:255:9: replace Job::args -> &[serde_json::Value] with Vec::leak(Vec::new())
src/worker/mod.rs:328:9: replace Worker<S, E>::run -> Result<usize, Error> with Ok(1)
src/proto/client/mod.rs:174:9: replace <impl Drop for Client<S>>::drop with ()
src/proto/client/mod.rs:409:9: replace ReadToken<'a, S>::read_json -> Result<Option<T>, Error> with Ok(None)
src/worker/mod.rs:182:9: replace Worker<S, E>::report_success_to_server -> Result<(), Error> with Ok(())
src/proto/utils.rs:11:5: replace host_from_url -> String with "xyzzy".into()
src/proto/single/cmd.rs:33:5: replace write_queues -> Result<(), Error> with Ok(())
src/proto/single/cmd.rs:250:9: replace <impl FaktoryCommand for Push>::issue -> Result<(), Error> with Ok(())
src/worker/mod.rs:228:9: replace Worker<S, E>::force_fail_all_workers -> usize with 1
src/proto/single/resp.rs:160:29: replace - with / in read
src/proto/single/mod.rs:250:9: replace Job::kind -> &str with ""
src/proto/single/resp.rs:172:29: replace - with / in read
src/worker/state.rs:66:9: replace WorkerStatesRegistry::reset with ()
src/proto/client/mod.rs:389:9: replace Client<S>::queue_resume -> Result<(), Error> with Ok(())
src/worker/health.rs:41:41: replace < with > in Worker<S, E>::listen_for_heartbeats
src/proto/single/mod.rs:267:5: replace write_command -> Result<(), Error> with Ok(())
src/proto/single/resp.rs:160:29: replace - with + in read
src/worker/mod.rs:328:9: replace Worker<S, E>::run -> Result<usize, Error> with Ok(0)
src/proto/single/resp.rs:148:29: replace - with + in read
src/worker/builder.rs:37:9: replace WorkerBuilder<E>::hostname -> &mut Self with Box::leak(Box::new(Default::default()))
src/worker/health.rs:41:41: replace < with == in Worker<S, E>::listen_for_heartbeats
src/proto/single/resp.rs:148:29: replace - with / in read
src/worker/state.rs:15:9: replace WorkerState::take_last_result -> Option<Result<JobId, Fail>> with Some(Ok(Default::default()))
src/proto/single/resp.rs:47:39: replace == with != in read_json
src/proto/client/mod.rs:286:9: replace Client<S>::fetch -> Result<Option<Job>, Error> with Ok(None)
src/proto/single/resp.rs:110:5: replace read_ok -> Result<(), Error> with Ok(())
src/worker/builder.rs:89:9: replace WorkerBuilder<E>::register_runner -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/client/mod.rs:229:9: replace Client<S>::init -> Result<(), Error> with Ok(())
src/worker/health.rs:28:23: replace == with != in Worker<S, E>::listen_for_heartbeats
src/worker/mod.rs:249:9: replace Worker<S, E>::run_one -> Result<bool, Error> with Ok(true)
src/proto/single/id.rs:43:9: replace JobId::random -> Self with Default::default()
src/worker/runner.rs:91:9: replace <impl JobRunner for Closure<F>>::run -> Result<(), E> with Ok(())
src/proto/single/resp.rs:112:14: replace == with != in read_ok
src/proto/single/utils.rs:7:5: replace gen_random_id -> String with String::new()
src/proto/utils.rs:16:21: replace != with == in url_parse
src/proto/utils.rs:11:5: replace host_from_url -> String with String::new()
src/proto/client/mod.rs:326:9: replace Client<S>::enqueue -> Result<(), Error> with Ok(())
src/proto/utils.rs:5:5: replace get_env_url -> String with String::new()
src/proto/single/resp.rs:190:63: replace - with / in read
src/proto/single/resp.rs:172:29: replace - with + in read
src/proto/single/mod.rs:278:5: replace write_command_and_await_ok -> Result<(), Error> with Ok(())
src/worker/builder.rs:61:9: replace WorkerBuilder<E>::workers -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/resp.rs:37:5: replace read_json -> Result<Option<T>, Error> with Ok(None)
src/worker/state.rs:19:9: replace WorkerState::take_cuurently_running -> Option<JobId> with Some(Default::default())
src/worker/mod.rs:232:25: replace += with -= in Worker<S, E>::force_fail_all_workers
src/proto/single/cmd.rs:144:9: replace <impl FaktoryCommand for End>::issue -> Result<(), Error> with Ok(())
src/proto/single/mod.rs:250:9: replace Job::kind -> &str with "xyzzy"
src/proto/single/cmd.rs:215:9: replace Hello::set_password with ()
src/proto/single/resp.rs:190:63: replace - with + in read
src/worker/mod.rs:170:9: replace Worker<S, E>::run_job -> Result<(), Failed<E>> with Ok(())
src/proto/single/resp.rs:206:21: replace == with != in read
src/proto/single/utils.rs:15:5: replace gen_random_jid -> String with String::new()
src/worker/builder.rs:45:9: replace WorkerBuilder<E>::wid -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/resp.rs:39:41: replace == with != in read_json
src/worker/mod.rs:249:9: replace Worker<S, E>::run_one -> Result<bool, Error> with Ok(false)
src/worker/builder.rs:76:9: replace WorkerBuilder<E>::register -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/cmd.rs:163:9: replace <impl FaktoryCommand for Fetch<'a, Q>>::issue -> Result<(), Error> with Ok(())
src/worker/mod.rs:305:57: replace == with != in Worker<S, E>::spawn_worker
src/proto/single/utils.rs:15:5: replace gen_random_jid -> String with "xyzzy".into()
