[
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, Some(HashMap::from_iter([(String::new(), String::new())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "ProgressUpdate::set",
      "return_type": "-> ProgressUpdate",
      "span": {
        "start": {
          "line": 42,
          "column": 5
        },
        "end": {
          "line": 45,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 44,
        "column": 9
      },
      "end": {
        "line": 44,
        "column": 62
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from(BufStream::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::new(BufStream::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "check_protocols_match",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 22,
          "column": 1
        },
        "end": {
          "line": 31,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 12
      },
      "end": {
        "line": 23,
        "column": 14
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::maybe_bid",
      "return_type": "-> Result<Option<BatchId>, Error>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 53,
        "column": 9
      },
      "end": {
        "line": 67,
        "column": 10
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::args",
      "return_type": "-> &[serde_json::Value]",
      "span": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 256,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 255,
        "column": 9
      },
      "end": {
        "line": 255,
        "column": 19
      }
    },
    "replacement": "Vec::leak(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "get_env_url",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 4,
          "column": 1
        },
        "end": {
          "line": 8,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 5,
        "column": 5
      },
      "end": {
        "line": 7,
        "column": 73
      }
    },
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "BatchBuilder::description",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 177,
          "column": 5
        },
        "end": {
          "line": 181,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 179,
        "column": 9
      },
      "end": {
        "line": 180,
        "column": 13
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, Some(HashMap::from_iter([(\"xyzzy\".into(), String::new())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_shutdown",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 166,
          "column": 5
        },
        "end": {
          "line": 171,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 9
      },
      "end": {
        "line": 170,
        "column": 48
      }
    },
    "replacement": "Poll::from_iter([Ok(())])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "BatchStatus::open",
      "return_type": "-> Result<Option<BatchHandle<'a, S>>, Error>",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 48
      }
    },
    "replacement": "Ok(Some(BatchHandle::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 138,
        "column": 5
      },
      "end": {
        "line": 232,
        "column": 6
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::issue",
      "return_type": "-> Result<ReadToken<'_, S>, Error>",
      "span": {
        "start": {
          "line": 274,
          "column": 5
        },
        "end": {
          "line": 280,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 278,
        "column": 9
      },
      "end": {
        "line": 279,
        "column": 28
      }
    },
    "replacement": "Ok(ReadToken::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::expires_in",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 47,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 46,
        "column": 9
      },
      "end": {
        "line": 46,
        "column": 42
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::labels",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 49,
          "column": 5
        },
        "end": {
          "line": 55,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 53,
        "column": 9
      },
      "end": {
        "line": 54,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "Progress::update_percent",
      "return_type": "-> ProgressUpdate",
      "span": {
        "start": {
          "line": 142,
          "column": 5
        },
        "end": {
          "line": 150,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 149,
        "column": 21
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_id",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 6,
          "column": 1
        },
        "end": {
          "line": 12,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 7,
        "column": 5
      },
      "end": {
        "line": 11,
        "column": 19
      }
    },
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for QueueControl<'_, Q>>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 297,
          "column": 5
        },
        "end": {
          "line": 305,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 298,
        "column": 9
      },
      "end": {
        "line": 304,
        "column": 40
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::queue_pause",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 373,
          "column": 5
        },
        "end": {
          "line": 382,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 378,
        "column": 9
      },
      "end": {
        "line": 381,
        "column": 19
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 70
      },
      "end": {
        "line": 87,
        "column": 72
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl DerefMut for TlsStream<S>>::deref_mut",
      "return_type": "-> &mut Self::Target",
      "span": {
        "start": {
          "line": 135,
          "column": 5
        },
        "end": {
          "line": 137,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 136,
        "column": 9
      },
      "end": {
        "line": 136,
        "column": 25
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::args",
      "return_type": "-> &[serde_json::Value]",
      "span": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 256,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 255,
        "column": 9
      },
      "end": {
        "line": 255,
        "column": 19
      }
    },
    "replacement": "Vec::leak(Vec::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "BatchBuilder::with_complete_callback",
      "return_type": "-> Batch",
      "span": {
        "start": {
          "line": 190,
          "column": 5
        },
        "end": {
          "line": 195,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 192,
        "column": 9
      },
      "end": {
        "line": 194,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::expires_in",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 47,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 46,
        "column": 36
      },
      "end": {
        "line": 46,
        "column": 37
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run",
      "return_type": "-> Result<usize, Error>",
      "span": {
        "start": {
          "line": 316,
          "column": 5
        },
        "end": {
          "line": 374,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 328,
        "column": 9
      },
      "end": {
        "line": 373,
        "column": 10
      }
    },
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncRead for TlsStream<S>>::poll_read",
      "return_type": "-> std::task::Poll<io::Result<()>>",
      "span": {
        "start": {
          "line": 141,
          "column": 5
        },
        "end": {
          "line": 147,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 146,
        "column": 49
      }
    },
    "replacement": "Poll::from_iter([Ok(())])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::commit",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 45,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 44,
        "column": 9
      },
      "end": {
        "line": 44,
        "column": 44
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "<impl Drop for Client<S>>::drop",
      "return_type": "",
      "span": {
        "start": {
          "line": 173,
          "column": 5
        },
        "end": {
          "line": 181,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 174,
        "column": 9
      },
      "end": {
        "line": 180,
        "column": 12
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::fetch",
      "return_type": "-> Result<Option<Job>, Error>",
      "span": {
        "start": {
          "line": 282,
          "column": 5
        },
        "end": {
          "line": 290,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 286,
        "column": 9
      },
      "end": {
        "line": 289,
        "column": 19
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "check_protocols_match",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 22,
          "column": 1
        },
        "end": {
          "line": 31,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 5
      },
      "end": {
        "line": 30,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from(BufStream::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 405,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 409,
        "column": 9
      },
      "end": {
        "line": 409,
        "column": 52
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::heartbeat",
      "return_type": "-> Result<HeartbeatStatus, Error>",
      "span": {
        "start": {
          "line": 292,
          "column": 5
        },
        "end": {
          "line": 315,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 293,
        "column": 9
      },
      "end": {
        "line": 314,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::from(Ok(1))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 34,
          "column": 1
        },
        "end": {
          "line": 63,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 5
      },
      "end": {
        "line": 62,
        "column": 33
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::expires_in",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 47,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 46,
        "column": 36
      },
      "end": {
        "line": 46,
        "column": 37
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_flush",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 159,
          "column": 5
        },
        "end": {
          "line": 164,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 163,
        "column": 45
      }
    },
    "replacement": "Poll::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 36
      },
      "end": {
        "line": 109,
        "column": 37
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, Some(HashMap::from_iter([(String::new(), \"xyzzy\".into())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::on_queue",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 234,
          "column": 5
        },
        "end": {
          "line": 241,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 239,
        "column": 9
      },
      "end": {
        "line": 240,
        "column": 13
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::report_success_to_server",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 181,
          "column": 5
        },
        "end": {
          "line": 183,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 182,
        "column": 9
      },
      "end": {
        "line": 182,
        "column": 60
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 52
      },
      "end": {
        "line": 109,
        "column": 53
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::open_batch",
      "return_type": "-> Result<Option<BatchHandle<'_, S>>, Error>",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 39,
        "column": 55
      }
    },
    "replacement": "Ok(Some(BatchHandle::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "Fail::set_backtrace",
      "return_type": "",
      "span": {
        "start": {
          "line": 112,
          "column": 5
        },
        "end": {
          "line": 114,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 113,
        "column": 9
      },
      "end": {
        "line": 113,
        "column": 32
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "host_from_url",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 10,
          "column": 1
        },
        "end": {
          "line": 12,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 11,
        "column": 5
      },
      "end": {
        "line": 11,
        "column": 74
      }
    },
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::force_fail_all_workers",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 242,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 228,
        "column": 9
      },
      "end": {
        "line": 241,
        "column": 16
      }
    },
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run",
      "return_type": "-> Result<usize, Error>",
      "span": {
        "start": {
          "line": 316,
          "column": 5
        },
        "end": {
          "line": 374,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 358,
        "column": 24
      },
      "end": {
        "line": 358,
        "column": 26
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::read_bid",
      "return_type": "-> Result<BatchId, Error>",
      "span": {
        "start": {
          "line": 48,
          "column": 5
        },
        "end": {
          "line": 50,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 49,
        "column": 9
      },
      "end": {
        "line": 49,
        "column": 51
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_shutdown",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 166,
          "column": 5
        },
        "end": {
          "line": 171,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 9
      },
      "end": {
        "line": 170,
        "column": 48
      }
    },
    "replacement": "Poll::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::expires_at",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 12,
          "column": 5
        },
        "end": {
          "line": 29,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 25,
        "column": 9
      },
      "end": {
        "line": 28,
        "column": 10
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/id.rs",
    "function": {
      "function_name": "<impl From for Value>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 85,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 84,
        "column": 9
      },
      "end": {
        "line": 84,
        "column": 23
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "BatchStatus::open",
      "return_type": "-> Result<Option<BatchHandle<'a, S>>, Error>",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 48
      }
    },
    "replacement": "Ok(Some(BatchHandle::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "write_queues",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 26,
          "column": 1
        },
        "end": {
          "line": 39,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 5
      },
      "end": {
        "line": 38,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for Push>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 249,
          "column": 5
        },
        "end": {
          "line": 254,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 250,
        "column": 9
      },
      "end": {
        "line": 253,
        "column": 40
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "TlsStream<TokioTcpStream>::connect",
      "return_type": "-> Result<Self, Error>",
      "span": {
        "start": {
          "line": 38,
          "column": 5
        },
        "end": {
          "line": 57,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 9
      },
      "end": {
        "line": 56,
        "column": 15
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::force_fail_all_workers",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 242,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 228,
        "column": 9
      },
      "end": {
        "line": 241,
        "column": 16
      }
    },
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "bad",
      "return_type": "-> error::Protocol",
      "span": {
        "start": {
          "line": 7,
          "column": 1
        },
        "end": {
          "line": 30,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 8,
        "column": 5
      },
      "end": {
        "line": 29,
        "column": 6
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::force_fail_all_workers",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 242,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 232,
        "column": 25
      },
      "end": {
        "line": 232,
        "column": 27
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::from_iter([Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 160,
        "column": 29
      },
      "end": {
        "line": 160,
        "column": 30
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::kind",
      "return_type": "-> &str",
      "span": {
        "start": {
          "line": 248,
          "column": 5
        },
        "end": {
          "line": 251,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 250,
        "column": 9
      },
      "end": {
        "line": 250,
        "column": 19
      }
    },
    "replacement": "\"\"",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 405,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 409,
        "column": 9
      },
      "end": {
        "line": 409,
        "column": 52
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::open_batch",
      "return_type": "-> Result<Option<BatchHandle<'_, S>>, Error>",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 39,
        "column": 55
      }
    },
    "replacement": "Ok(Some(BatchHandle::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 27,
          "column": 5
        },
        "end": {
          "line": 31,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 30,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::from_iter([Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 172,
        "column": 29
      },
      "end": {
        "line": 172,
        "column": 30
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerStatesRegistry::reset",
      "return_type": "",
      "span": {
        "start": {
          "line": 65,
          "column": 5
        },
        "end": {
          "line": 69,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 9
      },
      "end": {
        "line": 68,
        "column": 34
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "BatchStatus::open",
      "return_type": "-> Result<Option<BatchHandle<'a, S>>, Error>",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 48
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from(BufStream::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_flush",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 159,
          "column": 5
        },
        "end": {
          "line": 164,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 163,
        "column": 45
      }
    },
    "replacement": "Poll::new(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::queue_resume",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 384,
          "column": 5
        },
        "end": {
          "line": 393,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 389,
        "column": 9
      },
      "end": {
        "line": 392,
        "column": 19
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 41
      },
      "end": {
        "line": 41,
        "column": 42
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::issue",
      "return_type": "-> Result<ReadToken<'_, S>, Error>",
      "span": {
        "start": {
          "line": 274,
          "column": 5
        },
        "end": {
          "line": 280,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 278,
        "column": 9
      },
      "end": {
        "line": 279,
        "column": 28
      }
    },
    "replacement": "Ok(ReadToken::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "write_command",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 263,
          "column": 1
        },
        "end": {
          "line": 269,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 267,
        "column": 5
      },
      "end": {
        "line": 268,
        "column": 25
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "BatchStatus::open",
      "return_type": "-> Result<Option<BatchHandle<'a, S>>, Error>",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 48
      }
    },
    "replacement": "Ok(Some(BatchHandle::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_bid",
      "return_type": "-> Result<BatchId, Error>",
      "span": {
        "start": {
          "line": 67,
          "column": 1
        },
        "end": {
          "line": 83,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 69,
        "column": 5
      },
      "end": {
        "line": 82,
        "column": 6
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerState::take_cuurently_running",
      "return_type": "-> Option<JobId>",
      "span": {
        "start": {
          "line": 18,
          "column": 5
        },
        "end": {
          "line": 20,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 19,
        "column": 9
      },
      "end": {
        "line": 19,
        "column": 32
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "<impl Display for JobState>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 101,
          "column": 5
        },
        "end": {
          "line": 112,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 102,
        "column": 9
      },
      "end": {
        "line": 111,
        "column": 27
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 160,
        "column": 29
      },
      "end": {
        "line": 160,
        "column": 30
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl From for Fetch<'a, S>>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 173,
          "column": 5
        },
        "end": {
          "line": 175,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 174,
        "column": 9
      },
      "end": {
        "line": 174,
        "column": 25
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 20,
        "column": 9
      },
      "end": {
        "line": 76,
        "column": 10
      }
    },
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_hi",
      "return_type": "-> Result<Hi, Error>",
      "span": {
        "start": {
          "line": 97,
          "column": 1
        },
        "end": {
          "line": 105,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 5
      },
      "end": {
        "line": 104,
        "column": 38
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::builder",
      "return_type": "-> JobBuilder",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 232,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 231,
        "column": 9
      },
      "end": {
        "line": 231,
        "column": 30
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::get_batch_status",
      "return_type": "-> Result<Option<BatchStatus>, Error>",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 25,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 9
      },
      "end": {
        "line": 24,
        "column": 50
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 27,
          "column": 5
        },
        "end": {
          "line": 31,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 30,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::from(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run",
      "return_type": "-> Result<usize, Error>",
      "span": {
        "start": {
          "line": 316,
          "column": 5
        },
        "end": {
          "line": 374,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 328,
        "column": 9
      },
      "end": {
        "line": 373,
        "column": 10
      }
    },
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 24
      },
      "end": {
        "line": 78,
        "column": 25
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 148,
        "column": 29
      },
      "end": {
        "line": 148,
        "column": 30
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::hostname",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 9
      },
      "end": {
        "line": 38,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 41
      },
      "end": {
        "line": 41,
        "column": 42
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 148,
        "column": 29
      },
      "end": {
        "line": 148,
        "column": 30
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "Batch::builder",
      "return_type": "-> BatchBuilder",
      "span": {
        "start": {
          "line": 161,
          "column": 5
        },
        "end": {
          "line": 164,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 163,
        "column": 28
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, Some(HashMap::from_iter([(\"xyzzy\".into(), String::new())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerState::take_last_result",
      "return_type": "-> Option<Result<JobId, Fail>>",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 16,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 9
      },
      "end": {
        "line": 15,
        "column": 36
      }
    },
    "replacement": "Some(Ok(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 34,
          "column": 1
        },
        "end": {
          "line": 63,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 47,
        "column": 39
      },
      "end": {
        "line": 47,
        "column": 41
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::new(BufStream::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 194,
        "column": 49
      },
      "end": {
        "line": 194,
        "column": 50
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::fetch",
      "return_type": "-> Result<Option<Job>, Error>",
      "span": {
        "start": {
          "line": 282,
          "column": 5
        },
        "end": {
          "line": 290,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 286,
        "column": 9
      },
      "end": {
        "line": 289,
        "column": 19
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::get_progress",
      "return_type": "-> Result<Option<Progress>, Error>",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 19,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 18,
        "column": 50
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::issue",
      "return_type": "-> Result<ReadToken<'_, S>, Error>",
      "span": {
        "start": {
          "line": 274,
          "column": 5
        },
        "end": {
          "line": 280,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 278,
        "column": 9
      },
      "end": {
        "line": 279,
        "column": 28
      }
    },
    "replacement": "Ok(ReadToken::from(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncRead for TlsStream<S>>::poll_read",
      "return_type": "-> std::task::Poll<io::Result<()>>",
      "span": {
        "start": {
          "line": 141,
          "column": 5
        },
        "end": {
          "line": 147,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 146,
        "column": 49
      }
    },
    "replacement": "Poll::from(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::new(BufStream::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for Info>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 47,
          "column": 5
        },
        "end": {
          "line": 49,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 48,
        "column": 44
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::connect",
      "return_type": "-> Result<Worker<BufStream<TokioStream>, E>, Error>",
      "span": {
        "start": {
          "line": 106,
          "column": 5
        },
        "end": {
          "line": 119,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 113,
        "column": 9
      },
      "end": {
        "line": 118,
        "column": 74
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 27,
          "column": 5
        },
        "end": {
          "line": 31,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 30,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 359,
        "column": 24
      },
      "end": {
        "line": 359,
        "column": 25
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "TlsStream<TokioTcpStream>::with_connector",
      "return_type": "-> Result<Self, Error>",
      "span": {
        "start": {
          "line": 59,
          "column": 5
        },
        "end": {
          "line": 70,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 63,
        "column": 9
      },
      "end": {
        "line": 69,
        "column": 68
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_ok",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 109,
          "column": 1
        },
        "end": {
          "line": 118,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 5
      },
      "end": {
        "line": 117,
        "column": 38
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::from_iter([Ok(1)])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from(BufStream::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl Deref for TlsStream<S>>::deref",
      "return_type": "-> &Self::Target",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 131,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 9
      },
      "end": {
        "line": 130,
        "column": 21
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::register_runner",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 80,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 89,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 24
      },
      "end": {
        "line": 78,
        "column": 25
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::init",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 228,
          "column": 5
        },
        "end": {
          "line": 266,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 229,
        "column": 9
      },
      "end": {
        "line": 265,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, None))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::set_progress",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 5
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 11,
        "column": 9
      },
      "end": {
        "line": 12,
        "column": 48
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, Some(HashMap::new())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/id.rs",
    "function": {
      "function_name": "WorkerId::random",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 62,
          "column": 5
        },
        "end": {
          "line": 65,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 64,
        "column": 9
      },
      "end": {
        "line": 64,
        "column": 38
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "Fail::generic",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 108,
          "column": 5
        },
        "end": {
          "line": 110,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 9
      },
      "end": {
        "line": 109,
        "column": 46
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::unique_until_start",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 70,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 69,
        "column": 9
      },
      "end": {
        "line": 69,
        "column": 57
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/utils.rs",
    "function": {
      "function_name": "parse_datetime",
      "return_type": "-> Result<Option<DateTime<Utc>>, D::Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 1
        },
        "end": {
          "line": 17,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 13,
        "column": 5
      },
      "end": {
        "line": 16,
        "column": 6
      }
    },
    "replacement": "Ok(Some(DateTime::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 28,
        "column": 23
      },
      "end": {
        "line": 28,
        "column": 25
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::commit_batch",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 42,
          "column": 5
        },
        "end": {
          "line": 44,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 9
      },
      "end": {
        "line": 43,
        "column": 67
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run_one",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 244,
          "column": 5
        },
        "end": {
          "line": 276,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 249,
        "column": 9
      },
      "end": {
        "line": 275,
        "column": 17
      }
    },
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 17
      },
      "end": {
        "line": 29,
        "column": 19
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/id.rs",
    "function": {
      "function_name": "JobId::random",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 44,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 9
      },
      "end": {
        "line": 43,
        "column": 38
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::from(Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_shutdown",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 166,
          "column": 5
        },
        "end": {
          "line": 171,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 9
      },
      "end": {
        "line": 170,
        "column": 48
      }
    },
    "replacement": "Poll::new(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "<impl From for RawResponse>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 244,
          "column": 5
        },
        "end": {
          "line": 246,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 245,
        "column": 9
      },
      "end": {
        "line": 245,
        "column": 31
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/runner.rs",
    "function": {
      "function_name": "<impl JobRunner for Box<F>>::run",
      "return_type": "-> Result<(), E>",
      "span": {
        "start": {
          "line": 62,
          "column": 5
        },
        "end": {
          "line": 64,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 63,
        "column": 9
      },
      "end": {
        "line": 63,
        "column": 24
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::new(Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/runner.rs",
    "function": {
      "function_name": "<impl JobRunner for Closure<F>>::run",
      "return_type": "-> Result<(), E>",
      "span": {
        "start": {
          "line": 90,
          "column": 5
        },
        "end": {
          "line": 92,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 91,
        "column": 9
      },
      "end": {
        "line": 91,
        "column": 28
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_ok",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 109,
          "column": 1
        },
        "end": {
          "line": 118,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 112,
        "column": 14
      },
      "end": {
        "line": 112,
        "column": 16
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_id",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 6,
          "column": 1
        },
        "end": {
          "line": 12,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 7,
        "column": 5
      },
      "end": {
        "line": 11,
        "column": 19
      }
    },
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_shutdown",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 166,
          "column": 5
        },
        "end": {
          "line": 171,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 9
      },
      "end": {
        "line": 170,
        "column": 48
      }
    },
    "replacement": "Poll::from(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, None))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "<impl Clone for BatchBuilder>::clone",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 207,
          "column": 5
        },
        "end": {
          "line": 214,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 208,
        "column": 9
      },
      "end": {
        "line": 213,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "url_parse",
      "return_type": "-> Result<Url, Error>",
      "span": {
        "start": {
          "line": 14,
          "column": 1
        },
        "end": {
          "line": 28,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 16,
        "column": 21
      },
      "end": {
        "line": 16,
        "column": 23
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::get_progress",
      "return_type": "-> Result<Option<Progress>, Error>",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 19,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 18,
        "column": 50
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "host_from_url",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 10,
          "column": 1
        },
        "end": {
          "line": 12,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 11,
        "column": 5
      },
      "end": {
        "line": 11,
        "column": 74
      }
    },
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 322,
          "column": 5
        },
        "end": {
          "line": 327,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 326,
        "column": 9
      },
      "end": {
        "line": 326,
        "column": 60
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_flush",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 159,
          "column": 5
        },
        "end": {
          "line": 164,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 163,
        "column": 45
      }
    },
    "replacement": "Poll::from_iter([Ok(())])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 359,
        "column": 24
      },
      "end": {
        "line": 359,
        "column": 25
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "url_parse",
      "return_type": "-> Result<Url, Error>",
      "span": {
        "start": {
          "line": 14,
          "column": 1
        },
        "end": {
          "line": 28,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 33
      },
      "end": {
        "line": 23,
        "column": 35
      }
    },
    "replacement": "&&",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "BatchBuilder::with_callbacks",
      "return_type": "-> Batch",
      "span": {
        "start": {
          "line": 197,
          "column": 5
        },
        "end": {
          "line": 203,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 199,
        "column": 9
      },
      "end": {
        "line": 202,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::new(Ok(0))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_flush",
      "return_type": "-> std::task::Poll<Result<(), io::Error>>",
      "span": {
        "start": {
          "line": 159,
          "column": 5
        },
        "end": {
          "line": 164,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 163,
        "column": 45
      }
    },
    "replacement": "Poll::from(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from(BufStream::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::new(BufStream::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "get_env_url",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 4,
          "column": 1
        },
        "end": {
          "line": 8,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 5,
        "column": 5
      },
      "end": {
        "line": 7,
        "column": 73
      }
    },
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "TlsStream<S>::default",
      "return_type": "-> io::Result<Self>",
      "span": {
        "start": {
          "line": 77,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 83,
        "column": 9
      },
      "end": {
        "line": 87,
        "column": 53
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::from(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "Fail::generic_with_backtrace",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 132,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 123,
        "column": 9
      },
      "end": {
        "line": 131,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::new(BufStream::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::new()]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/utils.rs",
    "function": {
      "function_name": "parse_datetime",
      "return_type": "-> Result<Option<DateTime<Utc>>, D::Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 1
        },
        "end": {
          "line": 17,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 13,
        "column": 5
      },
      "end": {
        "line": 16,
        "column": 6
      }
    },
    "replacement": "Ok(Some(DateTime::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::read_ok",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 401,
          "column": 5
        },
        "end": {
          "line": 403,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 402,
        "column": 9
      },
      "end": {
        "line": 402,
        "column": 50
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::connect_again",
      "return_type": "-> Result<Self, Error>",
      "span": {
        "start": {
          "line": 158,
          "column": 5
        },
        "end": {
          "line": 161,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 159,
        "column": 9
      },
      "end": {
        "line": 160,
        "column": 48
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::add",
      "return_type": "-> Result<Option<serde_json::Value>, Error>",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 29,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 27,
        "column": 9
      },
      "end": {
        "line": 28,
        "column": 47
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, Some(HashMap::from_iter([(String::new(), String::new())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "BatchBuilder::with_success_callback",
      "return_type": "-> Batch",
      "span": {
        "start": {
          "line": 183,
          "column": 5
        },
        "end": {
          "line": 188,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 185,
        "column": 9
      },
      "end": {
        "line": 187,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for Track>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 28,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 9
      },
      "end": {
        "line": 27,
        "column": 10
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "<impl Deref for WorkerStatesRegistry>::deref",
      "return_type": "-> &Self::Target",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 33,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 32,
        "column": 9
      },
      "end": {
        "line": 32,
        "column": 16
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::failure",
      "return_type": "-> &Option<Failure>",
      "span": {
        "start": {
          "line": 258,
          "column": 5
        },
        "end": {
          "line": 261,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 260,
        "column": 9
      },
      "end": {
        "line": 260,
        "column": 22
      }
    },
    "replacement": "&Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 190,
        "column": 63
      },
      "end": {
        "line": 190,
        "column": 64
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 172,
        "column": 29
      },
      "end": {
        "line": 172,
        "column": 30
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "write_command_and_await_ok",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 271,
          "column": 1
        },
        "end": {
          "line": 280,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 278,
        "column": 5
      },
      "end": {
        "line": 279,
        "column": 26
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "<impl Display for CallbackState>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 38,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 31,
        "column": 9
      },
      "end": {
        "line": 37,
        "column": 27
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::report_on_all_workers",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 185,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 186,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::workers",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 57,
          "column": 5
        },
        "end": {
          "line": 63,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 61,
        "column": 9
      },
      "end": {
        "line": 62,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::connect_with",
      "return_type": "-> Result<Worker<BufStream<S>, E>, Error>",
      "span": {
        "start": {
          "line": 93,
          "column": 5
        },
        "end": {
          "line": 104,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 99,
        "column": 9
      },
      "end": {
        "line": 103,
        "column": 74
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::open_batch",
      "return_type": "-> Result<Option<BatchHandle<'_, S>>, Error>",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 39,
        "column": 55
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 34,
          "column": 1
        },
        "end": {
          "line": 63,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 5
      },
      "end": {
        "line": 62,
        "column": 33
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerState::take_cuurently_running",
      "return_type": "-> Option<JobId>",
      "span": {
        "start": {
          "line": 18,
          "column": 5
        },
        "end": {
          "line": 20,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 19,
        "column": 9
      },
      "end": {
        "line": 19,
        "column": 32
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 27,
          "column": 5
        },
        "end": {
          "line": 31,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 30,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "<impl From for RawResponse>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 238,
          "column": 5
        },
        "end": {
          "line": 240,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 239,
        "column": 9
      },
      "end": {
        "line": 239,
        "column": 43
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::force_fail_all_workers",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 242,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 232,
        "column": 25
      },
      "end": {
        "line": 232,
        "column": 27
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_wid",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 18,
          "column": 1
        },
        "end": {
          "line": 20,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 19,
        "column": 5
      },
      "end": {
        "line": 19,
        "column": 36
      }
    },
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::id",
      "return_type": "-> &JobId",
      "span": {
        "start": {
          "line": 243,
          "column": 5
        },
        "end": {
          "line": 246,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 245,
        "column": 9
      },
      "end": {
        "line": 245,
        "column": 18
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 93,
        "column": 70
      },
      "end": {
        "line": 93,
        "column": 72
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 38
      },
      "end": {
        "line": 110,
        "column": 39
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 52
      },
      "end": {
        "line": 109,
        "column": 53
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl From for Push>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 242,
          "column": 5
        },
        "end": {
          "line": 244,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 243,
        "column": 9
      },
      "end": {
        "line": 243,
        "column": 16
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for End>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 143,
          "column": 5
        },
        "end": {
          "line": 145,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 9
      },
      "end": {
        "line": 144,
        "column": 43
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 5
      },
      "end": {
        "line": 118,
        "column": 34
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_wid",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 18,
          "column": 1
        },
        "end": {
          "line": 20,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 19,
        "column": 5
      },
      "end": {
        "line": 19,
        "column": 36
      }
    },
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, Some(HashMap::from_iter([(String::new(), \"xyzzy\".into())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 20,
        "column": 9
      },
      "end": {
        "line": 76,
        "column": 10
      }
    },
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((1, Some(HashMap::from_iter([(\"xyzzy\".into(), \"xyzzy\".into())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/utils.rs",
    "function": {
      "function_name": "parse_datetime",
      "return_type": "-> Result<Option<DateTime<Utc>>, D::Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 1
        },
        "end": {
          "line": 17,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 13,
        "column": 5
      },
      "end": {
        "line": 16,
        "column": 6
      }
    },
    "replacement": "Ok(Some(DateTime::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::new(Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, Some(HashMap::new())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::reconnect",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 163,
          "column": 5
        },
        "end": {
          "line": 166,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 164,
        "column": 9
      },
      "end": {
        "line": 165,
        "column": 26
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/mod.rs",
    "function": {
      "function_name": "<impl Reconnect for BufStream<S>>::reconnect",
      "return_type": "-> io::Result<Self>",
      "span": {
        "start": {
          "line": 49,
          "column": 5
        },
        "end": {
          "line": 52,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 50,
        "column": 9
      },
      "end": {
        "line": 51,
        "column": 30
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::issue",
      "return_type": "-> Result<ReadToken<'_, S>, Error>",
      "span": {
        "start": {
          "line": 274,
          "column": 5
        },
        "end": {
          "line": 280,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 278,
        "column": 9
      },
      "end": {
        "line": 279,
        "column": 28
      }
    },
    "replacement": "Ok(ReadToken::from_iter([Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "parse_provided_or_from_env",
      "return_type": "-> Result<Url, Error>",
      "span": {
        "start": {
          "line": 30,
          "column": 1
        },
        "end": {
          "line": 32,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 31,
        "column": 5
      },
      "end": {
        "line": 31,
        "column": 45
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from(BufStream::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 28
      },
      "end": {
        "line": 78,
        "column": 30
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl From for PushBulk>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 262,
          "column": 5
        },
        "end": {
          "line": 264,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 263,
        "column": 9
      },
      "end": {
        "line": 263,
        "column": 23
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::new(Ok(1))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/utils.rs",
    "function": {
      "function_name": "parse_datetime",
      "return_type": "-> Result<Option<DateTime<Utc>>, D::Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 1
        },
        "end": {
          "line": 17,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 13,
        "column": 5
      },
      "end": {
        "line": 16,
        "column": 6
      }
    },
    "replacement": "Ok(Some(DateTime::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::new(BufStream::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::reconnect",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 147,
          "column": 5
        },
        "end": {
          "line": 149,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 148,
        "column": 9
      },
      "end": {
        "line": 148,
        "column": 33
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::unique_until_success",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 72,
          "column": 5
        },
        "end": {
          "line": 80,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 79,
        "column": 9
      },
      "end": {
        "line": 79,
        "column": 59
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::kind",
      "return_type": "-> &str",
      "span": {
        "start": {
          "line": 248,
          "column": 5
        },
        "end": {
          "line": 251,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 250,
        "column": 9
      },
      "end": {
        "line": 250,
        "column": 19
      }
    },
    "replacement": "\"xyzzy\"",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::get_batch_status",
      "return_type": "-> Result<Option<BatchStatus>, Error>",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 25,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 9
      },
      "end": {
        "line": 24,
        "column": 50
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::open_batch",
      "return_type": "-> Result<Option<BatchHandle<'_, S>>, Error>",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 39,
        "column": 55
      }
    },
    "replacement": "Ok(Some(BatchHandle::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/utils.rs",
    "function": {
      "function_name": "parse_datetime",
      "return_type": "-> Result<Option<DateTime<Utc>>, D::Error>",
      "span": {
        "start": {
          "line": 9,
          "column": 1
        },
        "end": {
          "line": 17,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 13,
        "column": 5
      },
      "end": {
        "line": 16,
        "column": 6
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "Hello::set_password",
      "return_type": "",
      "span": {
        "start": {
          "line": 214,
          "column": 5
        },
        "end": {
          "line": 224,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 215,
        "column": 9
      },
      "end": {
        "line": 223,
        "column": 58
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/mod.rs",
    "function": {
      "function_name": "<impl Reconnect for TokioStream>::reconnect",
      "return_type": "-> io::Result<Self>",
      "span": {
        "start": {
          "line": 38,
          "column": 5
        },
        "end": {
          "line": 41,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 39,
        "column": 9
      },
      "end": {
        "line": 40,
        "column": 41
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 190,
        "column": 63
      },
      "end": {
        "line": 190,
        "column": 64
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::add",
      "return_type": "-> Result<Option<serde_json::Value>, Error>",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 29,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 27,
        "column": 9
      },
      "end": {
        "line": 28,
        "column": 47
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::new(BufStream::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from(BufStream::new()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncRead for TlsStream<S>>::poll_read",
      "return_type": "-> std::task::Poll<io::Result<()>>",
      "span": {
        "start": {
          "line": 141,
          "column": 5
        },
        "end": {
          "line": 147,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 146,
        "column": 49
      }
    },
    "replacement": "Poll::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::spawn_worker",
      "return_type": "-> Result<JoinHandle<Result<(), Error>>, Error>",
      "span": {
        "start": {
          "line": 293,
          "column": 5
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 302,
        "column": 9
      },
      "end": {
        "line": 313,
        "column": 12
      }
    },
    "replacement": "Ok(JoinHandle::from(Ok(())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "<impl From for RawResponse>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 250,
          "column": 5
        },
        "end": {
          "line": 252,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 251,
        "column": 9
      },
      "end": {
        "line": 251,
        "column": 29
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerState::save_last_result",
      "return_type": "",
      "span": {
        "start": {
          "line": 22,
          "column": 5
        },
        "end": {
          "line": 24,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 23,
        "column": 9
      },
      "end": {
        "line": 23,
        "column": 41
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/utils.rs",
    "function": {
      "function_name": "url_parse",
      "return_type": "-> Result<Url, Error>",
      "span": {
        "start": {
          "line": 14,
          "column": 1
        },
        "end": {
          "line": 28,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 5
      },
      "end": {
        "line": 27,
        "column": 12
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::enqueue_many",
      "return_type": "-> Result<(usize, Option<HashMap<String, String>>), Error>",
      "span": {
        "start": {
          "line": 329,
          "column": 5
        },
        "end": {
          "line": 360,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 348,
        "column": 9
      },
      "end": {
        "line": 359,
        "column": 54
      }
    },
    "replacement": "Ok((0, Some(HashMap::from_iter([(\"xyzzy\".into(), \"xyzzy\".into())]))))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run_job",
      "return_type": "-> Result<(), Failed<E>>",
      "span": {
        "start": {
          "line": 169,
          "column": 5
        },
        "end": {
          "line": 175,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 9
      },
      "end": {
        "line": 174,
        "column": 60
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for PushBulk>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 269,
          "column": 5
        },
        "end": {
          "line": 274,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 270,
        "column": 9
      },
      "end": {
        "line": 273,
        "column": 40
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "Progress::update_builder",
      "return_type": "-> ProgressUpdateBuilder",
      "span": {
        "start": {
          "line": 152,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 9
      },
      "end": {
        "line": 154,
        "column": 53
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 206,
        "column": 21
      },
      "end": {
        "line": 206,
        "column": 23
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerStatesRegistry::register_running",
      "return_type": "",
      "span": {
        "start": {
          "line": 47,
          "column": 5
        },
        "end": {
          "line": 49,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 48,
        "column": 77
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerStatesRegistry::register_failure",
      "return_type": "",
      "span": {
        "start": {
          "line": 58,
          "column": 5
        },
        "end": {
          "line": 63,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 59,
        "column": 9
      },
      "end": {
        "line": 62,
        "column": 47
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::id",
      "return_type": "-> &BatchId",
      "span": {
        "start": {
          "line": 12,
          "column": 5
        },
        "end": {
          "line": 15,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 14,
        "column": 9
      },
      "end": {
        "line": 14,
        "column": 18
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_jid",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 14,
          "column": 1
        },
        "end": {
          "line": 16,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 5
      },
      "end": {
        "line": 15,
        "column": 33
      }
    },
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/health.rs",
    "function": {
      "function_name": "Worker<S, E>::listen_for_heartbeats",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 16,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 31,
        "column": 63
      },
      "end": {
        "line": 31,
        "column": 65
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "JobBuilder::add_to_custom_data",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 175,
          "column": 5
        },
        "end": {
          "line": 184,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 181,
        "column": 9
      },
      "end": {
        "line": 183,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/handle.rs",
    "function": {
      "function_name": "BatchHandle<'a, S>::start_batch",
      "return_type": "-> Result<BatchHandle<'_, S>, Error>",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 40
      }
    },
    "replacement": "Ok(BatchHandle::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::new(BufStream::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/mod.rs",
    "function": {
      "function_name": "JobBuilder::unique_for",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 49,
          "column": 5
        },
        "end": {
          "line": 61,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 60,
        "column": 9
      },
      "end": {
        "line": 60,
        "column": 52
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::from(Ok(0))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 38
      },
      "end": {
        "line": 110,
        "column": 39
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::wid",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 47,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 45,
        "column": 9
      },
      "end": {
        "line": 46,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read_json",
      "return_type": "-> Result<Option<T>, Error>",
      "span": {
        "start": {
          "line": 34,
          "column": 1
        },
        "end": {
          "line": 63,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 39,
        "column": 41
      },
      "end": {
        "line": 39,
        "column": 43
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::for_worker",
      "return_type": "-> Result<Self, Error>",
      "span": {
        "start": {
          "line": 284,
          "column": 5
        },
        "end": {
          "line": 291,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 285,
        "column": 9
      },
      "end": {
        "line": 290,
        "column": 11
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::new()]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "JobBuilder::build",
      "return_type": "-> Job",
      "span": {
        "start": {
          "line": 186,
          "column": 5
        },
        "end": {
          "line": 199,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 194,
        "column": 9
      },
      "end": {
        "line": 198,
        "column": 58
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/status.rs",
    "function": {
      "function_name": "BatchStatus::open",
      "return_type": "-> Result<Option<BatchHandle<'a, S>>, Error>",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 48
      }
    },
    "replacement": "Ok(Some(BatchHandle::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "JobBuilder::args",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 165,
          "column": 5
        },
        "end": {
          "line": 173,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 171,
        "column": 9
      },
      "end": {
        "line": 172,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerState::take_last_result",
      "return_type": "-> Option<Result<JobId, Fail>>",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 16,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 9
      },
      "end": {
        "line": 15,
        "column": 36
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::run_one",
      "return_type": "-> Result<bool, Error>",
      "span": {
        "start": {
          "line": 244,
          "column": 5
        },
        "end": {
          "line": 276,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 249,
        "column": 9
      },
      "end": {
        "line": 275,
        "column": 17
      }
    },
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/bin/loadtest.rs",
    "function": {
      "function_name": "main",
      "return_type": "",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 119,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 36
      },
      "end": {
        "line": 109,
        "column": 37
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "Client<S>::open_batch",
      "return_type": "-> Result<Option<BatchHandle<'_, S>>, Error>",
      "span": {
        "start": {
          "line": 33,
          "column": 5
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 39,
        "column": 55
      }
    },
    "replacement": "Ok(Some(BatchHandle::from(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "ProgressUpdateBuilder::build",
      "return_type": "-> ProgressUpdate",
      "span": {
        "start": {
          "line": 57,
          "column": 5
        },
        "end": {
          "line": 61,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 59,
        "column": 9
      },
      "end": {
        "line": 60,
        "column": 80
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncWrite for TlsStream<S>>::poll_write",
      "return_type": "-> std::task::Poll<Result<usize, io::Error>>",
      "span": {
        "start": {
          "line": 151,
          "column": 5
        },
        "end": {
          "line": 157,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 156,
        "column": 9
      },
      "end": {
        "line": 156,
        "column": 50
      }
    },
    "replacement": "Poll::from_iter([Ok(0)])",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/runner.rs",
    "function": {
      "function_name": "<impl JobRunner for &'a F>::run",
      "return_type": "-> Result<(), E>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 76,
        "column": 9
      },
      "end": {
        "line": 76,
        "column": 24
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/mod.rs",
    "function": {
      "function_name": "Job::failure",
      "return_type": "-> &Option<Failure>",
      "span": {
        "start": {
          "line": 258,
          "column": 5
        },
        "end": {
          "line": 261,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 260,
        "column": 9
      },
      "end": {
        "line": 260,
        "column": 22
      }
    },
    "replacement": "&None",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/builder.rs",
    "function": {
      "function_name": "WorkerBuilder<E>::register",
      "return_type": "-> &mut Self",
      "span": {
        "start": {
          "line": 65,
          "column": 5
        },
        "end": {
          "line": 78,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 76,
        "column": 9
      },
      "end": {
        "line": 77,
        "column": 13
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for Batch>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 7,
          "column": 5
        },
        "end": {
          "line": 12,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 8,
        "column": 9
      },
      "end": {
        "line": 11,
        "column": 40
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "<impl DerefMut for WorkerStatesRegistry>::deref_mut",
      "return_type": "-> &mut Self::Target",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 38,
        "column": 20
      }
    },
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::report_failure_to_server",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 177,
          "column": 5
        },
        "end": {
          "line": 179,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 178,
        "column": 9
      },
      "end": {
        "line": 178,
        "column": 47
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<S>>::connect_with",
      "return_type": "-> Result<Client<BufStream<S>>, Error>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 9
      },
      "end": {
        "line": 201,
        "column": 42
      }
    },
    "replacement": "Ok(Client::from(BufStream::from_iter([Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<BufStream<TokioStream>>::connect",
      "return_type": "-> Result<Client<BufStream<TokioStream>>, Error>",
      "span": {
        "start": {
          "line": 206,
          "column": 5
        },
        "end": {
          "line": 221,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 220,
        "column": 80
      }
    },
    "replacement": "Ok(Client::from_iter([BufStream::from(Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/state.rs",
    "function": {
      "function_name": "WorkerStatesRegistry::register_success",
      "return_type": "",
      "span": {
        "start": {
          "line": 51,
          "column": 5
        },
        "end": {
          "line": 56,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 9
      },
      "end": {
        "line": 55,
        "column": 40
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl FaktoryCommand for Fetch<'a, Q>>::issue",
      "return_type": "-> Result<(), Error>",
      "span": {
        "start": {
          "line": 162,
          "column": 5
        },
        "end": {
          "line": 166,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 9
      },
      "end": {
        "line": 165,
        "column": 40
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/ent.rs",
    "function": {
      "function_name": "ReadToken<'a, S>::maybe_bid",
      "return_type": "-> Result<Option<BatchId>, Error>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 53,
        "column": 9
      },
      "end": {
        "line": 67,
        "column": 10
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::spawn_worker",
      "return_type": "-> Result<JoinHandle<Result<(), Error>>, Error>",
      "span": {
        "start": {
          "line": 293,
          "column": 5
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 302,
        "column": 9
      },
      "end": {
        "line": 313,
        "column": 12
      }
    },
    "replacement": "Ok(JoinHandle::new(Ok(())))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::spawn_worker",
      "return_type": "-> Result<JoinHandle<Result<(), Error>>, Error>",
      "span": {
        "start": {
          "line": 293,
          "column": 5
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 302,
        "column": 9
      },
      "end": {
        "line": 313,
        "column": 12
      }
    },
    "replacement": "Ok(JoinHandle::from_iter([Ok(())]))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/ent/progress.rs",
    "function": {
      "function_name": "ProgressUpdate::builder",
      "return_type": "-> ProgressUpdateBuilder",
      "span": {
        "start": {
          "line": 47,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 9
      },
      "end": {
        "line": 52,
        "column": 40
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::spawn_worker",
      "return_type": "-> Result<JoinHandle<Result<(), Error>>, Error>",
      "span": {
        "start": {
          "line": 293,
          "column": 5
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 305,
        "column": 57
      },
      "end": {
        "line": 305,
        "column": 59
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl Reconnect for TlsStream<S>>::reconnect",
      "return_type": "-> io::Result<Self>",
      "span": {
        "start": {
          "line": 115,
          "column": 5
        },
        "end": {
          "line": 124,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 116,
        "column": 9
      },
      "end": {
        "line": 123,
        "column": 72
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/resp.rs",
    "function": {
      "function_name": "read",
      "return_type": "-> Result<RawResponse, Error>",
      "span": {
        "start": {
          "line": 134,
          "column": 1
        },
        "end": {
          "line": 233,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 194,
        "column": 49
      },
      "end": {
        "line": 194,
        "column": 50
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "faktory",
    "file": "src/proto/batch/mod.rs",
    "function": {
      "function_name": "BatchBuilder::build",
      "return_type": "-> Batch",
      "span": {
        "start": {
          "line": 168,
          "column": 5
        },
        "end": {
          "line": 170,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 169,
        "column": 9
      },
      "end": {
        "line": 169,
        "column": 65
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/cmd.rs",
    "function": {
      "function_name": "<impl Deref for Push>::deref",
      "return_type": "-> &Self::Target",
      "span": {
        "start": {
          "line": 236,
          "column": 5
        },
        "end": {
          "line": 238,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 237,
        "column": 9
      },
      "end": {
        "line": 237,
        "column": 16
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/client/mod.rs",
    "function": {
      "function_name": "Client<S>::info",
      "return_type": "-> Result<serde_json::Value, Error>",
      "span": {
        "start": {
          "line": 362,
          "column": 5
        },
        "end": {
          "line": 371,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 366,
        "column": 9
      },
      "end": {
        "line": 370,
        "column": 74
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/worker/mod.rs",
    "function": {
      "function_name": "Worker<S, E>::spawn_worker",
      "return_type": "-> Result<JoinHandle<Result<(), Error>>, Error>",
      "span": {
        "start": {
          "line": 293,
          "column": 5
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 302,
        "column": 9
      },
      "end": {
        "line": 313,
        "column": 12
      }
    },
    "replacement": "Ok(JoinHandle::new())",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/tls.rs",
    "function": {
      "function_name": "<impl AsyncRead for TlsStream<S>>::poll_read",
      "return_type": "-> std::task::Poll<io::Result<()>>",
      "span": {
        "start": {
          "line": 141,
          "column": 5
        },
        "end": {
          "line": 147,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 146,
        "column": 49
      }
    },
    "replacement": "Poll::new(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "faktory",
    "file": "src/proto/single/utils.rs",
    "function": {
      "function_name": "gen_random_jid",
      "return_type": "-> String",
      "span": {
        "start": {
          "line": 14,
          "column": 1
        },
        "end": {
          "line": 16,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 5
      },
      "end": {
        "line": 15,
        "column": 33
      }
    },
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  }
]