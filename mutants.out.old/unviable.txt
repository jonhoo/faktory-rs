src/proto/single/ent/progress.rs:44:9: replace ProgressUpdate::set -> ProgressUpdate with Default::default()
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new(Default::default())))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::new()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new())
src/proto/batch/mod.rs:179:9: replace BatchBuilder::description -> Self with Default::default()
src/tls.rs:170:9: replace <impl AsyncWrite for TlsStream<S>>::poll_shutdown -> std::task::Poll<Result<(), io::Error>> with Poll::from_iter([Ok(())])
src/proto/batch/status.rs:90:9: replace BatchStatus::open -> Result<Option<BatchHandle<'a, S>>, Error> with Ok(Some(BatchHandle::from(Default::default())))
src/proto/single/resp.rs:138:5: replace read -> Result<RawResponse, Error> with Ok(Default::default())
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::new())
src/proto/single/ent/mod.rs:46:9: replace JobBuilder::expires_in -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/ent/progress.rs:146:9: replace Progress::update_percent -> ProgressUpdate with Default::default()
src/tls.rs:136:9: replace <impl DerefMut for TlsStream<S>>::deref_mut -> &mut Self::Target with Box::leak(Box::new(Default::default()))
src/proto/batch/mod.rs:192:9: replace BatchBuilder::with_complete_callback -> Batch with Default::default()
src/tls.rs:146:9: replace <impl AsyncRead for TlsStream<S>>::poll_read -> std::task::Poll<io::Result<()>> with Poll::from_iter([Ok(())])
src/proto/client/mod.rs:286:9: replace Client<S>::fetch -> Result<Option<Job>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::from(Default::default())))
src/proto/client/mod.rs:293:9: replace Client<S>::heartbeat -> Result<HeartbeatStatus, Error> with Ok(Default::default())
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::from(Ok(1))
src/proto/single/resp.rs:37:5: replace read_json -> Result<Option<T>, Error> with Ok(Some(Default::default()))
src/proto/single/ent/mod.rs:46:36: replace + with * in JobBuilder::expires_in
src/tls.rs:163:9: replace <impl AsyncWrite for TlsStream<S>>::poll_flush -> std::task::Poll<Result<(), io::Error>> with Poll::new()
src/proto/single/mod.rs:239:9: replace Job::on_queue -> Self with Default::default()
src/proto/client/ent.rs:38:9: replace Client<S>::open_batch -> Result<Option<BatchHandle<'_, S>>, Error> with Ok(Some(BatchHandle::new(Default::default())))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))
src/tls.rs:170:9: replace <impl AsyncWrite for TlsStream<S>>::poll_shutdown -> std::task::Poll<Result<(), io::Error>> with Poll::new()
src/proto/single/ent/mod.rs:25:9: replace JobBuilder::expires_at -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/batch/status.rs:90:9: replace BatchStatus::open -> Result<Option<BatchHandle<'a, S>>, Error> with Ok(Some(BatchHandle::from_iter([Default::default()])))
src/tls.rs:52:9: replace TlsStream<TokioTcpStream>::connect -> Result<Self, Error> with Ok(Default::default())
src/proto/single/resp.rs:8:5: replace bad -> error::Protocol with Default::default()
src/proto/batch/handle.rs:33:9: replace BatchHandle<'a, S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::from_iter([Default::default()]))
src/proto/client/mod.rs:409:9: replace ReadToken<'a, S>::read_json -> Result<Option<T>, Error> with Ok(Some(Default::default()))
src/proto/client/ent.rs:38:9: replace Client<S>::open_batch -> Result<Option<BatchHandle<'_, S>>, Error> with Ok(Some(BatchHandle::from_iter([Default::default()])))
src/proto/client/ent.rs:29:9: replace Client<S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::from_iter([Default::default()]))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::from(Default::default())))
src/tls.rs:163:9: replace <impl AsyncWrite for TlsStream<S>>::poll_flush -> std::task::Poll<Result<(), io::Error>> with Poll::new(Ok(()))
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::new(Default::default()))
src/proto/batch/status.rs:90:9: replace BatchStatus::open -> Result<Option<BatchHandle<'a, S>>, Error> with Ok(Some(BatchHandle::new()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))
src/proto/single/cmd.rs:174:9: replace <impl From for Fetch<'a, S>>::from -> Self with Default::default()
src/proto/single/resp.rs:98:5: replace read_hi -> Result<Hi, Error> with Ok(Default::default())
src/proto/single/mod.rs:231:9: replace Job::builder -> JobBuilder with Default::default()
src/proto/client/ent.rs:23:9: replace Client<S>::get_batch_status -> Result<Option<BatchStatus>, Error> with Ok(Some(Default::default()))
src/proto/client/ent.rs:29:9: replace Client<S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::from(Default::default()))
src/proto/batch/mod.rs:163:9: replace Batch::builder -> BatchBuilder with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::from(Default::default())))
src/proto/client/ent.rs:17:9: replace Client<S>::get_progress -> Result<Option<Progress>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::from(Default::default()))
src/tls.rs:146:9: replace <impl AsyncRead for TlsStream<S>>::poll_read -> std::task::Poll<io::Result<()>> with Poll::from(Ok(()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new(Default::default())))
src/worker/builder.rs:113:9: replace WorkerBuilder<E>::connect -> Result<Worker<BufStream<TokioStream>, E>, Error> with Ok(Default::default())
src/proto/client/ent.rs:29:9: replace Client<S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::new(Default::default()))
src/tls.rs:63:9: replace TlsStream<TokioTcpStream>::with_connector -> Result<Self, Error> with Ok(Default::default())
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::from_iter([Ok(1)])
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::from_iter([Default::default()])))
src/tls.rs:130:9: replace <impl Deref for TlsStream<S>>::deref -> &Self::Target with &Default::default()
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::new()
src/proto/single/cmd.rs:109:9: replace Fail::generic -> Self with Default::default()
src/proto/single/ent/mod.rs:69:9: replace JobBuilder::unique_until_start -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/ent/utils.rs:13:5: replace parse_datetime -> Result<Option<DateTime<Utc>>, D::Error> with Ok(Some(DateTime::from(Default::default())))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::from(Default::default())]))
src/tls.rs:170:9: replace <impl AsyncWrite for TlsStream<S>>::poll_shutdown -> std::task::Poll<Result<(), io::Error>> with Poll::new(Ok(()))
src/proto/single/resp.rs:245:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::new(Default::default())]))
src/tls.rs:170:9: replace <impl AsyncWrite for TlsStream<S>>::poll_shutdown -> std::task::Poll<Result<(), io::Error>> with Poll::from(Ok(()))
src/proto/batch/mod.rs:208:9: replace <impl Clone for BatchBuilder>::clone -> Self with Default::default()
src/tls.rs:163:9: replace <impl AsyncWrite for TlsStream<S>>::poll_flush -> std::task::Poll<Result<(), io::Error>> with Poll::from_iter([Ok(())])
src/proto/batch/mod.rs:199:9: replace BatchBuilder::with_callbacks -> Batch with Default::default()
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::new(Ok(0))
src/tls.rs:163:9: replace <impl AsyncWrite for TlsStream<S>>::poll_flush -> std::task::Poll<Result<(), io::Error>> with Poll::from(Ok(()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::new()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::from(Default::default())))
src/tls.rs:83:9: replace TlsStream<S>::default -> io::Result<Self> with Ok(Default::default())
src/proto/batch/handle.rs:33:9: replace BatchHandle<'a, S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::from(Default::default()))
src/proto/single/cmd.rs:123:9: replace Fail::generic_with_backtrace -> Self with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::from_iter([Default::default()])))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::new()]))
src/proto/single/ent/utils.rs:13:5: replace parse_datetime -> Result<Option<DateTime<Utc>>, D::Error> with Ok(Some(DateTime::new()))
src/proto/client/mod.rs:159:9: replace Client<S>::connect_again -> Result<Self, Error> with Ok(Default::default())
src/proto/batch/handle.rs:33:9: replace BatchHandle<'a, S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::new(Default::default()))
src/proto/batch/mod.rs:185:9: replace BatchBuilder::with_success_callback -> Batch with Default::default()
src/worker/state.rs:32:9: replace <impl Deref for WorkerStatesRegistry>::deref -> &Self::Target with &Default::default()
src/proto/single/mod.rs:260:9: replace Job::failure -> &Option<Failure> with &Some(Default::default())
src/worker/builder.rs:99:9: replace WorkerBuilder<E>::connect_with -> Result<Worker<BufStream<S>, E>, Error> with Ok(Default::default())
src/proto/client/ent.rs:29:9: replace Client<S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::new())
src/proto/single/resp.rs:239:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new())
src/proto/single/mod.rs:245:9: replace Job::id -> &JobId with &Default::default()
src/proto/single/cmd.rs:243:9: replace <impl From for Push>::from -> Self with Default::default()
src/proto/single/ent/utils.rs:13:5: replace parse_datetime -> Result<Option<DateTime<Utc>>, D::Error> with Ok(Some(DateTime::from_iter([Default::default()])))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::new(Default::default())]))
src/proto/mod.rs:50:9: replace <impl Reconnect for BufStream<S>>::reconnect -> io::Result<Self> with Ok(Default::default())
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::from_iter([Default::default()]))
src/proto/utils.rs:31:5: replace parse_provided_or_from_env -> Result<Url, Error> with Ok(Default::default())
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::new(Default::default())))
src/proto/single/cmd.rs:263:9: replace <impl From for PushBulk>::from -> Self with Default::default()
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::new(Ok(1))
src/proto/single/ent/utils.rs:13:5: replace parse_datetime -> Result<Option<DateTime<Utc>>, D::Error> with Ok(Some(DateTime::new(Default::default())))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::from_iter([Default::default()])))
src/proto/single/ent/mod.rs:79:9: replace JobBuilder::unique_until_success -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/client/ent.rs:38:9: replace Client<S>::open_batch -> Result<Option<BatchHandle<'_, S>>, Error> with Ok(Some(BatchHandle::new()))
src/proto/mod.rs:39:9: replace <impl Reconnect for TokioStream>::reconnect -> io::Result<Self> with Ok(Default::default())
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new()))
src/tls.rs:146:9: replace <impl AsyncRead for TlsStream<S>>::poll_read -> std::task::Poll<io::Result<()>> with Poll::new()
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::from(Ok(())))
src/proto/single/resp.rs:251:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/utils.rs:15:5: replace url_parse -> Result<Url, Error> with Ok(Default::default())
src/proto/single/ent/progress.rs:154:9: replace Progress::update_builder -> ProgressUpdateBuilder with Default::default()
src/proto/batch/handle.rs:14:9: replace BatchHandle<'a, S>::id -> &BatchId with &Default::default()
src/proto/single/mod.rs:181:9: replace JobBuilder::add_to_custom_data -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/batch/handle.rs:33:9: replace BatchHandle<'a, S>::start_batch -> Result<BatchHandle<'_, S>, Error> with Ok(BatchHandle::new())
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::new(Default::default())))
src/proto/single/ent/mod.rs:60:9: replace JobBuilder::unique_for -> &mut Self with Box::leak(Box::new(Default::default()))
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::from(Ok(0))
src/worker/mod.rs:285:9: replace Worker<S, E>::for_worker -> Result<Self, Error> with Ok(Default::default())
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::new()]))
src/proto/single/mod.rs:194:9: replace JobBuilder::build -> Job with Default::default()
src/proto/batch/status.rs:90:9: replace BatchStatus::open -> Result<Option<BatchHandle<'a, S>>, Error> with Ok(Some(BatchHandle::new(Default::default())))
src/proto/single/mod.rs:171:9: replace JobBuilder::args -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/client/ent.rs:38:9: replace Client<S>::open_batch -> Result<Option<BatchHandle<'_, S>>, Error> with Ok(Some(BatchHandle::from(Default::default())))
src/proto/single/ent/progress.rs:59:9: replace ProgressUpdateBuilder::build -> ProgressUpdate with Default::default()
src/tls.rs:156:9: replace <impl AsyncWrite for TlsStream<S>>::poll_write -> std::task::Poll<Result<usize, io::Error>> with Poll::from_iter([Ok(0)])
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::from_iter([Default::default()])))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::from(Default::default())]))
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new(Ok(())))
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::from_iter([Ok(())]))
src/proto/single/ent/progress.rs:52:9: replace ProgressUpdate::builder -> ProgressUpdateBuilder with Default::default()
src/tls.rs:116:9: replace <impl Reconnect for TlsStream<S>>::reconnect -> io::Result<Self> with Ok(Default::default())
src/proto/batch/mod.rs:169:9: replace BatchBuilder::build -> Batch with Default::default()
src/proto/single/cmd.rs:237:9: replace <impl Deref for Push>::deref -> &Self::Target with &Default::default()
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new())
src/tls.rs:146:9: replace <impl AsyncRead for TlsStream<S>>::poll_read -> std::task::Poll<io::Result<()>> with Poll::new(Ok(()))
