
*** src/worker/health.rs:20:9: replace Worker<S, E>::listen_for_heartbeats -> Result<bool, Error> with Ok(false)

*** mutation diff:
--- src/worker/health.rs
+++ replace Worker<S, E>::listen_for_heartbeats -> Result<bool, Error> with Ok(false)
@@ -12,67 +12,11 @@
         S: AsyncBufReadExt + AsyncWriteExt + Reconnect + Send + Unpin + 'static,
         E: StdError + 'static + Send,
     > Worker<S, E>
 {
     pub(crate) async fn listen_for_heartbeats(
         &mut self,
         statuses: &Vec<Arc<atomic::AtomicUsize>>,
     ) -> Result<bool, Error> {
-        let mut target = STATUS_RUNNING;
-
-        let mut last = time::Instant::now();
-
-        loop {
-            tokio_sleep(time::Duration::from_millis(100)).await;
-
-            // has a worker failed?
-            if target == STATUS_RUNNING
-                && statuses
-                    .iter()
-                    .any(|s| s.load(atomic::Ordering::SeqCst) == STATUS_TERMINATING)
-            {
-                // tell all workers to exit
-                // (though chances are they've all failed already)
-                for s in statuses {
-                    s.store(STATUS_TERMINATING, atomic::Ordering::SeqCst);
-                }
-                break Ok(false);
-            }
-
-            if last.elapsed().as_secs() < 5 {
-                // don't sent a heartbeat yet
-                continue;
-            }
-
-            match self.c.heartbeat().await {
-                Ok(hb) => {
-                    match hb {
-                        HeartbeatStatus::Ok => {}
-                        HeartbeatStatus::Quiet => {
-                            // tell the workers to eventually terminate
-                            for s in statuses {
-                                s.store(STATUS_QUIET, atomic::Ordering::SeqCst);
-                            }
-                            target = STATUS_QUIET;
-                        }
-                        HeartbeatStatus::Terminate => {
-                            // tell the workers to terminate
-                            // *and* fail the current job and immediately return
-                            for s in statuses {
-                                s.store(STATUS_QUIET, atomic::Ordering::SeqCst);
-                            }
-                            break Ok(true);
-                        }
-                    }
-                }
-                Err(e) => {
-                    // for this to fail, the workers have probably also failed
-                    for s in statuses {
-                        s.store(STATUS_TERMINATING, atomic::Ordering::SeqCst);
-                    }
-                    break Err(e);
-                }
-            }
-            last = time::Instant::now();
-        }
+        Ok(false) /* ~ changed by cargo-mutants ~ */
     }
 }


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 1.09s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml --locked --all-features --all-targets
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished test [unoptimized + debuginfo] target(s) in 1.39s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::single::resp::test::it_decodes_blob_json ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.98s

     Running unittests src/bin/loadtest.rs (target/debug/deps/loadtest-c216a21f6a383186)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/consumer.rs (target/debug/deps/consumer-e1d67c7fdddceb0c)

running 8 tests
test dequeue_first_empty ... ok
test hello ... ok
test dequeue ... ok
test hello_pwd ... ok
test well_behaved_many ... FAILED
test no_first_job ... FAILED
test well_behaved ... FAILED
test terminate has been running for over 60 seconds

*** result: Timeout
