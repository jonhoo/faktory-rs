
*** src/worker/mod.rs:186:9: replace Worker<S, E>::report_on_all_workers -> Result<(), Error> with Ok(())

*** mutation diff:
--- src/worker/mod.rs
+++ replace Worker<S, E>::report_on_all_workers -> Result<(), Error> with Ok(())
@@ -178,51 +178,17 @@
         self.c.issue(f).await?.read_ok().await
     }
 
     async fn report_success_to_server(&mut self, jid: JobId) -> Result<(), Error> {
         self.c.issue(&Ack::new(jid)).await?.read_ok().await
     }
 
     async fn report_on_all_workers(&mut self) -> Result<(), Error> {
-        let worker_states = Arc::get_mut(&mut self.worker_states)
-            .expect("all workers are scoped to &mut of the user-code-visible Worker");
-
-        // retry delivering notification about our last job result.
-        // we know there's no leftover thread at this point, so there's no race on the option.
-        for wstate in worker_states.iter_mut() {
-            let wstate = wstate.get_mut().unwrap();
-            if let Some(res) = wstate.take_last_result() {
-                let r = match res {
-                    Ok(ref jid) => self.c.issue(&Ack::new(jid.clone())).await,
-                    Err(ref fail) => self.c.issue(fail).await,
-                };
-
-                let r = match r {
-                    Ok(r) => r,
-                    Err(e) => {
-                        wstate.save_last_result(res);
-                        return Err(e);
-                    }
-                };
-
-                if let Err(e) = r.read_ok().await {
-                    // it could be that the server did previously get our ACK/FAIL, and that it was
-                    // the resulting OK that failed. in that case, we would get an error response
-                    // when re-sending the job response. this should not count as critical. other
-                    // errors, however, should!
-                    if let Error::IO(_) = e {
-                        wstate.save_last_result(res);
-                        return Err(e);
-                    }
-                }
-            }
-        }
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     // FAIL currently running jobs even though they're still running.
     // Returns the number of workers that may still be processing jobs.
     // We are ignoring any FAIL command issue errors, since this is already
     // an "emergency" case.
     async fn force_fail_all_workers(&mut self) -> usize {
         let mut running = 0;


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 1.21s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml --locked --all-features --all-targets
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished test [unoptimized + debuginfo] target(s) in 1.65s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::single::resp::test::it_decodes_blob_json ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... ok
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 3.03s

     Running unittests src/bin/loadtest.rs (target/debug/deps/loadtest-c216a21f6a383186)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/consumer.rs (target/debug/deps/consumer-e1d67c7fdddceb0c)

running 8 tests
test dequeue ... ok
test hello ... ok
test dequeue_first_empty ... ok
test hello_pwd ... ok
test terminate ... ok
test well_behaved_many ... ok
test well_behaved ... ok
test no_first_job ... ok

test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 10.14s

     Running tests/producer.rs (target/debug/deps/producer-df2a4c85351204eb)

running 4 tests
test queue_control ... ok
test hello ... ok
test enqueue ... ok
test hello_pwd ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s

     Running tests/real/main.rs (target/debug/deps/real-25004b966fe6ecc0)

running 20 tests
test community::hello_client ... ok
test community::roundtrip ... ok
test community::test_jobs_created_with_builder ... ok
test community::fail ... ok
test enterprise::ent_unique_job ... ok
test community::hello_worker ... ok
test enterprise::test_batches_can_be_nested ... ok
test community::queue ... ok
test community::enqueue_job ... ok
test enterprise::ent_unique_job_until_start ... ok
test community::multi ... ok
test enterprise::test_batch_can_be_reopened_add_extra_jobs_and_batches_added ... ok
test community::test_jobs_pushed_in_bulk ... ok
test enterprise::ent_unique_job_bypass_unique_lock ... ok
test enterprise::test_tracker_can_send_and_retrieve_job_execution_progress ... ok
test enterprise::test_callback_will_be_queued_upon_commit_even_if_batch_is_empty ... ok
test enterprise::ent_expiring_job ... ok
test enterprise::ent_unique_job_until_success ... ok
test enterprise::test_batch_of_jobs_can_be_initiated ... ok
test enterprise::test_callback_will_not_be_queued_unless_batch_gets_committed ... ok

test result: ok. 20 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.08s

     Running tests/tls.rs (target/debug/deps/tls-5b4e80b3c3ce326a)

running 1 test
test roundtrip_tls ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


*** result: Success
