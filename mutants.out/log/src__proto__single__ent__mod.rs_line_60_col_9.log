
*** src/proto/single/ent/mod.rs:60:9: replace JobBuilder::unique_for -> &mut Self with Box::leak(Box::new(Default::default()))

*** mutation diff:
--- src/proto/single/ent/mod.rs
+++ replace JobBuilder::unique_for -> &mut Self with Box::leak(Box::new(Default::default()))
@@ -52,17 +52,17 @@
     /// rather than a guarantee. Check out the Enterprise Faktory [docs](https://github.com/contribsys/faktory/wiki/Ent-Unique-Jobs)
     /// for details on how scheduling, retries, and other features live together with `unique_for`.
     ///
     /// If you've already created and pushed a unique job (job "A") to the Faktory server and now have got another one
     /// of same kind, with the same args and destined for the same queue (job "B") and you would like - for some reason - to
     /// bypass the unique constraint, simply leave `unique_for` field on the job's custom hash empty, i.e. do not use this setter.
     /// In this case, the Faktory server will accept job "B", though technically this job "B" is a duplicate.
     pub fn unique_for(&mut self, secs: usize) -> &mut Self {
-        self.add_to_custom_data("unique_for", secs)
+        Box::leak(Box::new(Default::default())) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Remove unique lock for this job right before the job starts executing.
     ///
     /// Another job with the same kind-args-queue combination will be accepted by the Faktory server
     /// after the period specified in [`unique_for`](JobBuilder::unique_for) has finished
     /// _or_ after this job has been been consumed (i.e. its execution has ***started***).
     pub fn unique_until_start(&mut self) -> &mut Self {


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 0.81s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml --locked --all-features --all-targets
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
error[E0277]: the trait bound `JobBuilder: Default` is not satisfied
  --> src/proto/single/ent/mod.rs:60:28
   |
60 |         Box::leak(Box::new(Default::default())) /* ~ changed by cargo-mutants ~ */
   |                            ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `JobBuilder`
   |
help: consider annotating `JobBuilder` with `#[derive(Default)]`
  --> src/proto/single/mod.rs:65:48
   |
65 | #[derive(Serialize, Deserialize, Debug, Clone, #[derive(Default)]
   |                                                ++++++++++++++++++

For more information about this error, try `rustc --explain E0277`.
error: could not compile `faktory` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error[E0277]: the trait bound `single::JobBuilder: Default` is not satisfied
  --> src/proto/single/ent/mod.rs:60:28
   |
60 |         Box::leak(Box::new(Default::default())) /* ~ changed by cargo-mutants ~ */
   |                            ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `single::JobBuilder`
   |
help: consider annotating `single::JobBuilder` with `#[derive(Default)]`
  --> src/proto/single/mod.rs:65:48
   |
65 | #[derive(Serialize, Deserialize, Debug, Clone, #[derive(Default)]
   |                                                ++++++++++++++++++

error: could not compile `faktory` (lib test) due to 1 previous error

*** result: Failure(101)
