
*** src/proto/single/cmd.rs:250:9: replace <impl FaktoryCommand for Push>::issue -> Result<(), Error> with Ok(())

*** mutation diff:
--- src/proto/single/cmd.rs
+++ replace <impl FaktoryCommand for Push>::issue -> Result<(), Error> with Ok(())
@@ -242,20 +242,17 @@
     fn from(j: Job) -> Self {
         Push(j)
     }
 }
 
 #[async_trait::async_trait]
 impl FaktoryCommand for Push {
     async fn issue<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> Result<(), Error> {
-        w.write_all(b"PUSH ").await?;
-        let r = serde_json::to_vec(&**self).map_err(Error::Serialization)?;
-        w.write_all(&r).await?;
-        Ok(w.write_all(b"\r\n").await?)
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 // ---------------------- PUSHB -------------------
 
 pub(crate) struct PushBulk(Vec<Job>);
 
 impl From<Vec<Job>> for PushBulk {


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml --locked --all-features --all-targets
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished test [unoptimized + debuginfo] target(s) in 1.78s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_decodes_blob_json ... ok
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 3.08s

     Running unittests src/bin/loadtest.rs (target/debug/deps/loadtest-c216a21f6a383186)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/consumer.rs (target/debug/deps/consumer-e1d67c7fdddceb0c)

running 8 tests
test dequeue ... ok
test hello ... ok
test dequeue_first_empty ... ok
test hello_pwd ... ok
test terminate ... ok
test well_behaved ... ok
test well_behaved_many ... ok
test no_first_job ... ok

test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 10.14s

     Running tests/producer.rs (target/debug/deps/producer-df2a4c85351204eb)

running 4 tests
test queue_control ... ok
test hello ... ok
test enqueue ... FAILED
test hello_pwd ... ok

failures:

---- enqueue stdout ----
thread 'enqueue' panicked at tests/producer.rs:54:5:
assertion failed: written.starts_with(b"PUSH {")
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    enqueue

test result: FAILED. 3 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.03s

error: test failed, to rerun pass `--test producer`

*** result: Failure(101)
