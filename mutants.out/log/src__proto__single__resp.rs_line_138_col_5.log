
*** src/proto/single/resp.rs:138:5: replace read -> Result<RawResponse, Error> with Ok(Default::default())

*** mutation diff:
--- src/proto/single/resp.rs
+++ replace read -> Result<RawResponse, Error> with Ok(Default::default())
@@ -130,111 +130,17 @@
     Number(isize),
     Null,
 }
 
 async fn read<R>(mut r: R) -> Result<RawResponse, Error>
 where
     R: AsyncReadExt + AsyncBufReadExt + Unpin,
 {
-    let mut cmdbuf = [0u8; 1];
-    r.read_exact(&mut cmdbuf).await?;
-    match cmdbuf[0] {
-        b'+' => {
-            // Simple String
-            // https://redis.io/topics/protocol#resp-simple-strings
-            let mut s = String::new();
-            r.read_line(&mut s).await?;
-
-            // remove newlines
-            let l = s.len() - 2;
-            s.truncate(l);
-
-            Ok(RawResponse::String(s))
-        }
-        b'-' => {
-            // Error
-            // https://redis.io/topics/protocol#resp-errors
-            let mut s = String::new();
-            r.read_line(&mut s).await?;
-
-            // remove newlines
-            let l = s.len() - 2;
-            s.truncate(l);
-
-            Err(error::Protocol::new(s).into())
-        }
-        b':' => {
-            // Integer
-            // https://redis.io/topics/protocol#resp-integers
-            let mut s = String::with_capacity(32);
-            r.read_line(&mut s).await?;
-
-            // remove newlines
-            let l = s.len() - 2;
-            s.truncate(l);
-
-            match (*s).parse::<isize>() {
-                Ok(i) => Ok(RawResponse::Number(i)),
-                Err(_) => Err(error::Protocol::BadResponse {
-                    typed_as: "integer",
-                    error: "invalid integer value",
-                    bytes: s.into_bytes(),
-                }
-                .into()),
-            }
-        }
-        b'$' => {
-            // Bulk String
-            // https://redis.io/topics/protocol#resp-bulk-strings
-            let mut bytes = Vec::with_capacity(32);
-            r.read_until(b'\n', &mut bytes).await?;
-            let s = std::str::from_utf8(&bytes[0..bytes.len() - 2]).map_err(|_| {
-                error::Protocol::BadResponse {
-                    typed_as: "bulk string",
-                    error: "server bulk response contains non-utf8 size prefix",
-                    bytes: bytes[0..bytes.len() - 2].to_vec(),
-                }
-            })?;
-
-            let size = s
-                .parse::<isize>()
-                .map_err(|_| error::Protocol::BadResponse {
-                    typed_as: "bulk string",
-                    error: "server bulk response size prefix is not an integer",
-                    bytes: s.as_bytes().to_vec(),
-                })?;
-
-            if size == -1 {
-                Ok(RawResponse::Null)
-            } else {
-                let size = size as usize;
-                let mut bytes = vec![0; size];
-                r.read_exact(&mut bytes[..]).await?;
-                r.read_exact(&mut [0u8; 2]).await?;
-                Ok(RawResponse::Blob(bytes))
-            }
-        }
-        b'*' => {
-            // Arrays
-            // https://redis.io/topics/protocol#resp-arrays
-            //
-            // not used in faktory.
-            // *and* you can't really skip them unless you parse them.
-            // *and* not parsing them would leave the stream in an inconsistent state.
-            // so we'll just give up
-            unimplemented!();
-        }
-        c => Err(error::Protocol::BadResponse {
-            typed_as: "unknown",
-            error: "invalid response type prefix",
-            bytes: vec![c],
-        }
-        .into()),
-    }
+    Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 // these are mostly for convenience for testing
 
 impl<'a> From<&'a str> for RawResponse {
     fn from(s: &'a str) -> Self {
         RawResponse::String(s.to_string())
     }


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
error[E0277]: the trait bound `RawResponse: Default` is not satisfied
   --> src/proto/single/resp.rs:138:8
    |
138 |     Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
    |        ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `RawResponse`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `faktory` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 1 previous error

*** result: Failure(101)
