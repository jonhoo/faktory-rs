
*** src/proto/single/cmd.rs:263:9: replace <impl From for PushBulk>::from -> Self with Default::default()

*** mutation diff:
--- src/proto/single/cmd.rs
+++ replace <impl From for PushBulk>::from -> Self with Default::default()
@@ -255,17 +255,17 @@
 }
 
 // ---------------------- PUSHB -------------------
 
 pub(crate) struct PushBulk(Vec<Job>);
 
 impl From<Vec<Job>> for PushBulk {
     fn from(jobs: Vec<Job>) -> Self {
-        PushBulk(jobs)
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[async_trait::async_trait]
 impl FaktoryCommand for PushBulk {
     async fn issue<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> Result<(), Error> {
         w.write_all(b"PUSHB ").await?;
         let r = serde_json::to_vec(&self.0).map_err(Error::Serialization)?;


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
error[E0277]: the trait bound `cmd::PushBulk: Default` is not satisfied
   --> src/proto/single/cmd.rs:263:9
    |
263 |         Default::default() /* ~ changed by cargo-mutants ~ */
    |         ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `cmd::PushBulk`
    |
help: consider annotating `cmd::PushBulk` with `#[derive(Default)]`
    |
259 + #[derive(Default)]
260 | pub(crate) struct PushBulk(Vec<Job>);
    |

For more information about this error, try `rustc --explain E0277`.
error: could not compile `faktory` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 1 previous error

*** result: Failure(101)
