
*** src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new())

*** mutation diff:
--- src/worker/mod.rs
+++ replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new())
@@ -294,28 +294,17 @@
         &mut self,
         status: Arc<AtomicUsize>,
         worker: usize,
         queues: &[Q],
     ) -> Result<JoinHandle<Result<(), Error>>, Error>
     where
         Q: AsRef<str>,
     {
-        let mut w = self.for_worker().await?;
-        let queues: Vec<_> = queues.iter().map(|s| s.as_ref().to_string()).collect();
-        Ok(tokio::spawn(async move {
-            while status.load(atomic::Ordering::SeqCst) == STATUS_RUNNING {
-                if let Err(e) = w.run_one(worker, &queues[..]).await {
-                    status.store(STATUS_TERMINATING, atomic::Ordering::SeqCst);
-                    return Err(e);
-                }
-            }
-            status.store(STATUS_TERMINATING, atomic::Ordering::SeqCst);
-            Ok(())
-        }))
+        Ok(JoinHandle::new()) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Run this worker on the given `queues` until an I/O error occurs (`Err` is returned), or
     /// until the server tells the worker to disengage (`Ok` is returned).
     ///
     /// The value in an `Ok` indicates the number of workers that may still be processing jobs.
     ///
     /// If an error occurred while reporting a job success or failure, the result will be re-reported to the server


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
error[E0624]: associated function `new` is private
   --> src/worker/mod.rs:302:24
    |
302 |         Ok(JoinHandle::new()) /* ~ changed by cargo-mutants ~ */
    |                        ^^^ private associated function
    |
   ::: /home/pavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/runtime/task/join.rs:169:5
    |
169 |     pub(super) fn new(raw: RawTask) -> JoinHandle<T> {
    |     ------------------------------------------------ private associated function defined here

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> src/worker/mod.rs:302:12
    |
302 |         Ok(JoinHandle::new()) /* ~ changed by cargo-mutants ~ */
    |            ^^^^^^^^^^^^^^^-- an argument of type `runtime::task::raw::RawTask` is missing
    |
note: associated function defined here
   --> /home/pavel/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/runtime/task/join.rs:169:19
    |
169 |     pub(super) fn new(raw: RawTask) -> JoinHandle<T> {
    |                   ^^^
help: provide the argument
    |
302 |         Ok(JoinHandle::new(/* runtime::task::raw::RawTask */)) /* ~ changed by cargo-mutants ~ */
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0624.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `faktory` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 2 previous errors

*** result: Failure(101)
