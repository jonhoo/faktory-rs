
*** src/proto/single/mod.rs:278:5: replace write_command_and_await_ok -> Result<(), Error> with Ok(())

*** mutation diff:
--- src/proto/single/mod.rs
+++ replace write_command_and_await_ok -> Result<(), Error> with Ok(())
@@ -270,18 +270,17 @@
 
 pub async fn write_command_and_await_ok<
     S: AsyncBufRead + AsyncWriteExt + Unpin + Send,
     C: FaktoryCommand,
 >(
     stream: &mut S,
     command: &C,
 ) -> Result<(), Error> {
-    write_command(stream, command).await?;
-    read_ok(stream).await
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[cfg(test)]
 mod test {
     use super::*;
 
     #[test]
     fn test_job_can_be_created_with_builder() {


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 1.13s

*** result: Success

*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml --locked --all-features --all-targets
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
    Finished test [unoptimized + debuginfo] target(s) in 1.56s
     Running unittests src/lib.rs (target/debug/deps/faktory-248e4bd4cd431a2c)

running 35 tests
test proto::batch::test::test_batch_serialized_correctly ... ok
test proto::single::ent::test::test_same_purpose_setters_applied_simultaneously ... ok
test proto::single::ent::test::test_expiration_feature_for_enterprise_faktory ... ok
test proto::single::ent::test::test_uniqueness_faeture_for_enterprise_faktory ... ok
test proto::batch::test::test_batch_creation ... ok
test proto::single::resp::test::it_decodes_blob_json ... ok
test proto::single::resp::test::it_decodes_json_empty ... ok
test proto::single::resp::test::it_cant_do_arrays - should panic ... ok
test proto::single::resp::test::it_decodes_json_ok_blob ... ok
test proto::single::resp::test::it_decodes_json_ok_string ... ok
test proto::single::resp::test::it_decodes_json_nill ... ok
test proto::single::resp::test::it_decodes_string_json ... ok
test proto::single::resp::test::it_errors_on_bad_json_blob ... ok
test proto::single::resp::test::it_errors_on_bad_sizes ... ok
test proto::single::resp::test::it_errors_on_bad_json_string ... ok
test proto::single::resp::test::it_errors_on_bad_numbers ... ok
test proto::single::resp::test::it_parses_empty_bulk ... ok
test proto::single::resp::test::it_parses_errors ... ok
test proto::single::resp::test::it_parses_nills ... ok
test proto::single::resp::test::it_errors_on_unknown_resp_type ... ok
test proto::single::resp::test::it_parses_non_empty_bulk ... ok
test proto::single::resp::test::it_parses_simple_strings ... ok
test proto::single::resp::test::json_error_on_number ... ok
test proto::single::test::test_all_job_creation_variants_align ... ok
test proto::single::test::test_job_can_be_created_with_builder ... ok
test proto::single::utils::test::test_id_of_known_size_generated ... ok
test proto::single::resp::test::it_parses_numbers ... ok
test proto::single::test::test_arbitrary_custom_data_setter ... ok
test proto::utils::tests::correct_env_parsing ... ok
test proto::utils::tests::url_can_take_password_and_port ... ok
test proto::utils::tests::url_doesnt_require_port ... ok
test proto::utils::tests::url_port_default ... ok
test proto::utils::tests::url_requires_host ... ok
test proto::utils::tests::url_requires_tcp ... ok
test proto::single::utils::test::test_ids_are_unique ... ok

test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 3.07s

     Running unittests src/bin/loadtest.rs (target/debug/deps/loadtest-c216a21f6a383186)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/consumer.rs (target/debug/deps/consumer-e1d67c7fdddceb0c)

running 8 tests
test dequeue ... FAILED
test hello ... FAILED
test dequeue_first_empty ... FAILED
test hello_pwd ... FAILED
test no_first_job ... FAILED
test well_behaved ... FAILED
test well_behaved_many ... FAILED
test terminate ... FAILED

failures:

---- dequeue stdout ----
thread 'dequeue' panicked at tests/consumer.rs:89:5:
assertion `left == right` failed
  left: [70, 69, 84, 67, 72, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10]
 right: [70, 69, 84, 67, 72, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 65, 67, 75, 32, 123, 34, 106, 105, 100, 34, 58, 34, 102, 111, 111, 106, 105, 100, 34, 125, 13, 10]

---- hello stdout ----
thread 'hello' panicked at tests/consumer.rs:17:5:
assertion failed: written.starts_with(b"HELLO {")

---- dequeue_first_empty stdout ----
thread 'dequeue_first_empty' panicked at tests/consumer.rs:133:25:
assertion failed: did_work
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- hello_pwd stdout ----
thread 'hello_pwd' panicked at tests/consumer.rs:46:5:
assertion failed: written.starts_with(b"HELLO {")

---- no_first_job stdout ----
thread 'no_first_job' panicked at tests/consumer.rs:259:34:
called `Result::unwrap()` on an `Err` value: IO(Custom { kind: UnexpectedEof, error: "early eof" })

---- well_behaved stdout ----
thread 'well_behaved' panicked at tests/consumer.rs:194:34:
called `Result::unwrap()` on an `Err` value: IO(Custom { kind: UnexpectedEof, error: "early eof" })

---- well_behaved_many stdout ----
thread 'well_behaved_many' panicked at tests/consumer.rs:334:34:
called `Result::unwrap()` on an `Err` value: IO(Custom { kind: UnexpectedEof, error: "early eof" })

---- terminate stdout ----
thread 'terminate' panicked at tests/consumer.rs:399:5:
assertion `left == right` failed
  left: [66, 69, 65, 84, 32, 123, 34, 119, 105, 100, 34, 58, 34, 119, 105, 100, 34, 125, 13, 10, 66, 69, 65, 84, 32]
 right: [66, 69, 65, 84, 32, 123, 34, 119, 105, 100, 34, 58, 34, 119, 105, 100, 34, 125, 13, 10, 70, 65, 73, 76, 32]


failures:
    dequeue
    dequeue_first_empty
    hello
    hello_pwd
    no_first_job
    terminate
    well_behaved
    well_behaved_many

test result: FAILED. 0 passed; 8 failed; 0 ignored; 0 measured; 0 filtered out; finished in 10.14s

error: test failed, to rerun pass `--test consumer`

*** result: Failure(101)
