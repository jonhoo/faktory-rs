
*** src/proto/single/mod.rs:260:9: replace Job::failure -> &Option<Failure> with &Some(Default::default())

*** mutation diff:
--- src/proto/single/mod.rs
+++ replace Job::failure -> &Option<Failure> with &Some(Default::default())
@@ -252,17 +252,17 @@
 
     /// The arguments provided for this job.
     pub fn args(&self) -> &[serde_json::Value] {
         &self.args
     }
 
     /// Data about this job's most recent failure.
     pub fn failure(&self) -> &Option<Failure> {
-        &self.failure
+        &Some(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 }
 pub async fn write_command<W: AsyncWriteExt + Unpin + Send, C: FaktoryCommand>(
     w: &mut W,
     command: &C,
 ) -> Result<(), Error> {
     command.issue::<W>(w).await?;
     Ok(w.flush().await?)


*** /home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo build --tests --manifest-path /tmp/cargo-mutants-faktory-rs-3ziugm.tmp/Cargo.toml
   Compiling faktory v0.12.5 (/tmp/cargo-mutants-faktory-rs-3ziugm.tmp)
error[E0277]: the trait bound `Failure: Default` is not satisfied
   --> src/proto/single/mod.rs:260:15
    |
260 |         &Some(Default::default()) /* ~ changed by cargo-mutants ~ */
    |               ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `Failure`
    |
help: consider annotating `Failure` with `#[derive(Default)]`
    |
203 + #[derive(Default)]
204 | pub struct Failure {
    |

For more information about this error, try `rustc --explain E0277`.
error: could not compile `faktory` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `faktory` (lib test) due to 1 previous error

*** result: Failure(101)
