src/worker/builder.rs:113:9: replace WorkerBuilder<E>::connect -> Result<Worker<BufStream<TokioStream>, E>, Error> with Ok(Default::default())
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new()))
src/proto/single/cmd.rs:109:9: replace Fail::generic -> Self with Default::default()
src/proto/single/resp.rs:8:5: replace bad -> error::Protocol with Default::default()
src/proto/single/mod.rs:245:9: replace Job::id -> &JobId with &Default::default()
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::new())
src/proto/single/mod.rs:239:9: replace Job::on_queue -> Self with Default::default()
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::from(Default::default())))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new(Default::default())))
src/proto/single/mod.rs:260:9: replace Job::failure -> &Option<Failure> with &Some(Default::default())
src/proto/mod.rs:50:9: replace <impl Reconnect for BufStream<S>>::reconnect -> io::Result<Self> with Ok(Default::default())
src/proto/single/mod.rs:171:9: replace JobBuilder::args -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::from(Default::default())]))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::new()]))
src/proto/single/resp.rs:239:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::new(Default::default()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new())
src/proto/single/mod.rs:194:9: replace JobBuilder::build -> Job with Default::default()
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::from(Ok(())))
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::from_iter([Default::default()]))
src/proto/single/resp.rs:138:5: replace read -> Result<RawResponse, Error> with Ok(Default::default())
src/proto/client/mod.rs:159:9: replace Client<S>::connect_again -> Result<Self, Error> with Ok(Default::default())
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::new(Default::default())))
src/worker/mod.rs:285:9: replace Worker<S, E>::for_worker -> Result<Self, Error> with Ok(Default::default())
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::new(Default::default())))
src/proto/single/resp.rs:251:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::from(Default::default())]))
src/proto/client/mod.rs:278:9: replace Client<S>::issue -> Result<ReadToken<'_, S>, Error> with Ok(ReadToken::from(Default::default()))
src/proto/single/resp.rs:98:5: replace read_hi -> Result<Hi, Error> with Ok(Default::default())
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::new()))
src/proto/single/resp.rs:37:5: replace read_json -> Result<Option<T>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::from_iter([Default::default()])))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::new(Default::default())]))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::new(Default::default())))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::from(Default::default())))
src/proto/mod.rs:39:9: replace <impl Reconnect for TokioStream>::reconnect -> io::Result<Self> with Ok(Default::default())
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::from_iter([Default::default()])))
src/proto/client/mod.rs:286:9: replace Client<S>::fetch -> Result<Option<Job>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new(BufStream::from_iter([Default::default()])))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::new()))
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new(Ok(())))
src/proto/single/cmd.rs:243:9: replace <impl From for Push>::from -> Self with Default::default()
src/proto/single/mod.rs:181:9: replace JobBuilder::add_to_custom_data -> &mut Self with Box::leak(Box::new(Default::default()))
src/proto/single/cmd.rs:174:9: replace <impl From for Fetch<'a, S>>::from -> Self with Default::default()
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::new(Default::default())]))
src/proto/single/resp.rs:245:9: replace <impl From for RawResponse>::from -> Self with Default::default()
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::new(BufStream::from_iter([Default::default()])))
src/worker/builder.rs:99:9: replace WorkerBuilder<E>::connect_with -> Result<Worker<BufStream<S>, E>, Error> with Ok(Default::default())
src/proto/utils.rs:31:5: replace parse_provided_or_from_env -> Result<Url, Error> with Ok(Default::default())
src/proto/client/mod.rs:409:9: replace ReadToken<'a, S>::read_json -> Result<Option<T>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::new()))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::new())
src/proto/single/cmd.rs:123:9: replace Fail::generic_with_backtrace -> Self with Default::default()
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::from_iter([Ok(())]))
src/proto/single/cmd.rs:237:9: replace <impl Deref for Push>::deref -> &Self::Target with &Default::default()
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from_iter([BufStream::from_iter([Default::default()])]))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from_iter([BufStream::new()]))
src/proto/client/mod.rs:196:9: replace Client<BufStream<S>>::connect_with -> Result<Client<BufStream<S>>, Error> with Ok(Client::from(BufStream::from(Default::default())))
src/proto/utils.rs:15:5: replace url_parse -> Result<Url, Error> with Ok(Default::default())
src/proto/single/mod.rs:231:9: replace Job::builder -> JobBuilder with Default::default()
src/proto/single/cmd.rs:263:9: replace <impl From for PushBulk>::from -> Self with Default::default()
src/worker/mod.rs:302:9: replace Worker<S, E>::spawn_worker -> Result<JoinHandle<Result<(), Error>>, Error> with Ok(JoinHandle::new())
src/proto/client/mod.rs:218:9: replace Client<BufStream<TokioStream>>::connect -> Result<Client<BufStream<TokioStream>>, Error> with Ok(Client::from(BufStream::from(Default::default())))
src/worker/state.rs:32:9: replace <impl Deref for WorkerStatesRegistry>::deref -> &Self::Target with &Default::default()
src/proto/client/mod.rs:293:9: replace Client<S>::heartbeat -> Result<HeartbeatStatus, Error> with Ok(Default::default())
