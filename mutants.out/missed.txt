src/proto/single/id.rs:64:9: replace WorkerId::random -> Self with Default::default()
src/worker/state.rs:52:9: replace WorkerStatesRegistry::register_success with ()
src/proto/single/ent/mod.rs:46:36: replace + with - in JobBuilder::expires_in
src/bin/loadtest.rs:78:28: replace == with != in main
src/proto/client/ent.rs:53:9: replace ReadToken<'a, S>::maybe_bid -> Result<Option<BatchId>, Error> with Ok(Some(Default::default()))
src/proto/client/mod.rs:23:5: replace check_protocols_match -> Result<(), Error> with Ok(())
src/worker/state.rs:15:9: replace WorkerState::take_last_result -> Option<Result<JobId, Fail>> with None
src/proto/single/utils.rs:19:5: replace gen_random_wid -> String with String::new()
src/proto/single/resp.rs:69:5: replace read_bid -> Result<BatchId, Error> with Ok(Default::default())
src/proto/client/ent.rs:43:9: replace Client<S>::commit_batch -> Result<(), Error> with Ok(())
src/worker/mod.rs:178:9: replace Worker<S, E>::report_failure_to_server -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, Some(HashMap::new())))
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, Some(HashMap::from_iter([(String::new(), "xyzzy".into())]))))
src/proto/batch/handle.rs:44:9: replace BatchHandle<'a, S>::commit -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, Some(HashMap::from_iter([(String::new(), "xyzzy".into())]))))
src/proto/single/cmd.rs:48:9: replace <impl FaktoryCommand for Info>::issue -> Result<(), Error> with Ok(())
src/proto/batch/handle.rs:27:9: replace BatchHandle<'a, S>::add -> Result<Option<serde_json::Value>, Error> with Ok(None)
src/proto/client/mod.rs:366:9: replace Client<S>::info -> Result<serde_json::Value, Error> with Ok(Default::default())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, Some(HashMap::from_iter([("xyzzy".into(), String::new())]))))
src/proto/batch/cmd.rs:8:9: replace <impl FaktoryCommand for Batch>::issue -> Result<(), Error> with Ok(())
src/proto/single/ent/cmd.rs:15:9: replace <impl FaktoryCommand for Track>::issue -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, None))
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, Some(HashMap::from_iter([("xyzzy".into(), "xyzzy".into())]))))
src/worker/mod.rs:148:9: replace Worker<S, E>::reconnect -> Result<(), Error> with Ok(())
src/bin/loadtest.rs:109:36: replace * with / in main
src/bin/loadtest.rs:78:24: replace % with / in main
src/proto/single/resp.rs:194:49: replace - with + in read
src/bin/loadtest.rs:109:36: replace * with + in main
src/proto/single/cmd.rs:113:9: replace Fail::set_backtrace with ()
src/proto/client/ent.rs:53:9: replace ReadToken<'a, S>::maybe_bid -> Result<Option<BatchId>, Error> with Ok(None)
src/proto/single/utils.rs:19:5: replace gen_random_wid -> String with "xyzzy".into()
src/proto/batch/handle.rs:27:9: replace BatchHandle<'a, S>::add -> Result<Option<serde_json::Value>, Error> with Ok(Some(Default::default()))
src/proto/single/resp.rs:194:49: replace - with / in read
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, Some(HashMap::from_iter([("xyzzy".into(), String::new())]))))
src/proto/single/mod.rs:260:9: replace Job::failure -> &Option<Failure> with &None
src/worker/state.rs:38:9: replace <impl DerefMut for WorkerStatesRegistry>::deref_mut -> &mut Self::Target with Box::leak(Box::new(Default::default()))
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, Some(HashMap::from_iter([(String::new(), String::new())]))))
src/proto/client/ent.rs:38:9: replace Client<S>::open_batch -> Result<Option<BatchHandle<'_, S>>, Error> with Ok(None)
src/worker/mod.rs:186:9: replace Worker<S, E>::report_on_all_workers -> Result<(), Error> with Ok(())
src/bin/loadtest.rs:78:24: replace % with + in main
src/bin/loadtest.rs:93:70: replace >= with < in main
src/proto/client/mod.rs:402:9: replace ReadToken<'a, S>::read_ok -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:359:24: replace - with + in Client<S>::enqueue_many
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, None))
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, Some(HashMap::from_iter([("xyzzy".into(), "xyzzy".into())]))))
src/proto/utils.rs:23:33: replace || with && in url_parse
src/bin/loadtest.rs:110:38: replace / with * in main
src/proto/client/ent.rs:23:9: replace Client<S>::get_batch_status -> Result<Option<BatchStatus>, Error> with Ok(None)
src/bin/loadtest.rs:109:52: replace + with * in main
src/worker/runner.rs:76:9: replace <impl JobRunner for &'a F>::run -> Result<(), E> with Ok(())
src/proto/single/cmd.rs:270:9: replace <impl FaktoryCommand for PushBulk>::issue -> Result<(), Error> with Ok(())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((1, Some(HashMap::new())))
src/proto/single/ent/progress.rs:102:9: replace <impl Display for JobState>::fmt -> std::fmt::Result with Ok(Default::default())
src/bin/loadtest.rs:15:5: replace main with ()
src/bin/loadtest.rs:110:38: replace / with % in main
src/proto/client/ent.rs:17:9: replace Client<S>::get_progress -> Result<Option<Progress>, Error> with Ok(None)
src/proto/batch/status.rs:90:9: replace BatchStatus::open -> Result<Option<BatchHandle<'a, S>>, Error> with Ok(None)
src/bin/loadtest.rs:109:52: replace + with - in main
src/proto/single/id.rs:84:9: replace <impl From for Value>::from -> Self with Default::default()
src/proto/client/mod.rs:359:24: replace - with / in Client<S>::enqueue_many
src/worker/state.rs:59:9: replace WorkerStatesRegistry::register_failure with ()
src/worker/state.rs:23:9: replace WorkerState::save_last_result with ()
src/proto/client/ent.rs:11:9: replace Client<S>::set_progress -> Result<(), Error> with Ok(())
src/proto/client/ent.rs:49:9: replace ReadToken<'a, S>::read_bid -> Result<BatchId, Error> with Ok(Default::default())
src/proto/client/mod.rs:348:9: replace Client<S>::enqueue_many -> Result<(usize, Option<HashMap<String, String>>), Error> with Ok((0, Some(HashMap::from_iter([(String::new(), String::new())]))))
src/worker/runner.rs:63:9: replace <impl JobRunner for Box<F>>::run -> Result<(), E> with Ok(())
src/bin/loadtest.rs:87:70: replace >= with < in main
src/proto/batch/status.rs:31:9: replace <impl Display for CallbackState>::fmt -> std::fmt::Result with Ok(Default::default())
src/proto/client/mod.rs:164:9: replace Client<S>::reconnect -> Result<(), Error> with Ok(())
src/proto/single/ent/utils.rs:13:5: replace parse_datetime -> Result<Option<DateTime<Utc>>, D::Error> with Ok(None)
